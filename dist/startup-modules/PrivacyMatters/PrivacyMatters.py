CONFIGFILE = b"# This is the PRC configuration file for a published TTR client. Note that only\n# this file and Panda3D's Confauto.prc are included. Any relevant directives in\n# Config.prc should be reproduced here.\n\n# Client settings\nwindow-title Toontown Rewritten [PRIVATE]\nserver-version ttrp-beta-v2.10.0\nsync-video #f\nwant-dev #f\npreload-avatars #t\ntexture-anisotropic-degree 16\nwant-speedhack-fix #t\nload-display pandagl\n\n\n# New Addons!\nwant-WASD #t\ntt-framerate #t\nwant-new-ttrloader #t\nwant-new-toonhall #t\nwant-max-font #t\nwant-smooth-animations #f\n\n\n# Resource settings\nmodel-path /\nmodel-cache-models #f\nmodel-cache-textures #f\nvfs-mount phase_3.mf /\nvfs-mount phase_3.5.mf /\nvfs-mount phase_4.mf /\nvfs-mount phase_5.mf /\nvfs-mount phase_5.5.mf /\nvfs-mount phase_6.mf /\nvfs-mount phase_7.mf /\nvfs-mount phase_8.mf /\nvfs-mount phase_9.mf /\nvfs-mount phase_10.mf /\nvfs-mount phase_11.mf /\nvfs-mount phase_12.mf /\nvfs-mount phase_13.mf /\ndefault-model-extension .bam\n\n\n# DC Files\n#dc-file config/ttrp.dc Automatically wrapped into the code.\n\n\n# Server settings\nwant-rpc-server #f\nrpc-server-endpoint http://localhost:8080/\neventlog-host 127.0.0.1\nwant-cheesy-expirations #t\n- Mongo Settings\nmongodb-url mongodb://127.0.0.1/astron\n\n\n# Beta Modifications\n# Temporary modifications for unimplemented features go here.\nwant-pets #t\nwant-news-tab #f\nwant-news-page #f\nwant-accessories #f\nwant-parties #t\nwant-gardening #t\nwant-gifting #f\nwant-skip-button #t\n# This is a temporary 'fix' for DistributedSmoothNodes... probably not the permanent solution to our problem, but it works for now.\nsmooth-lag 0.4\nwant-keep-alive #f\n\n\n# Developer Modifications\n# A few fun things for our developer build. These shouldn't go in public_client.\nestate-day-night #f\nwant-instant-parties #t\nshow-total-population #f\nwant-toontorial #f\n\n\n# Chat stuff\nwant-whitelist #t\nwant-blacklist-sequence #f\nforce-avatar-understandable #f\nforce-player-understandable #f\n\n\n# Holidays and Events\nforce-holiday-decorations 6\nwant-arg-manager #t\nwant-mega-invasions #f\nmega-invasion-cog-type tm\n\n\n# Working (Custom) Addons!\nwant-toonfest #t\nwant-doomsday #f"
DCFILE = b'//First up is otp.dc...\nfrom direct.distributed import DistributedObject/AI/UD\nfrom direct.distributed import DistributedNode/AI/UD\nfrom direct.distributed import DistributedSmoothNode/AI\nfrom direct.distributed import DistributedCartesianGrid/AI\nfrom direct.distributed import DistributedCamera/AI/OV\nfrom otp.distributed import Account/AI/UD\nfrom otp.ai import TimeManager/AI\nfrom otp.ai import MagicWordManager/AI\nfrom otp.avatar import DistributedAvatar/AI/UD\nfrom otp.avatar import DistributedPlayer/AI\nfrom otp.friends import FriendManager/AI\nfrom otp.friends import AvatarFriendsManager/UD\nfrom otp.friends import PlayerFriendsManager/UD\nfrom otp.friends import GuildManager/AI/UD\nfrom otp.friends import FriendInfo\nfrom otp.friends import AvatarFriendInfo\nfrom otp.distributed import ObjectServer/AI/UD\nfrom otp.distributed import DistributedDistrict/AI/UD\nfrom otp.distributed import DistributedDirectory/AI\nfrom otp.distributed import DistributedTestObject/AI\nfrom otp.snapshot import SnapshotDispatcher/AI/UD\nfrom otp.snapshot import SnapshotRenderer/AI/UD\nfrom otp.uberdog import OtpAvatarManager/AI/UD\nfrom otp.chat import ChatAgent/UD\nfrom otp.uberdog import SpeedchatRelay/UD\nfrom otp.distributed import CentralLogger/AI/UD\nfrom otp.web import SettingsMgr/AI/UD\nfrom otp.status import StatusDatabase/UD\nfrom otp.avatar import AvatarHandle\n\ntypedef uint8 bool;\n\ntypedef uint32 DoId;\n\ntypedef DoId DoIdList[];\n\nstruct AvatarPendingDel {\n  uint32 Avatar;\n  uint32 date;\n};\n\ndclass Account {\n  uint32 ACCOUNT_AV_SET[6] required db;\n  uint32 ESTATE_ID db;\n  AvatarPendingDel ACCOUNT_AV_SET_DEL[] db;\n  string CREATED db;\n  string LAST_LOGIN db;\n  string ACCOUNT_ID db;\n  uint16 ADMIN_ACCESS db;\n  uint8 BETA_KEY_QUEST db;\n};\n\nstruct BarrierData {\n  uint16 context;\n  string name;\n  DoIdList avIds;\n};\n\ndclass DistributedObject {\n  setBarrierData(BarrierData data[]) broadcast ram;\n  setBarrierReady(uint16 barrierContext) airecv clsend;\n  execCommand(string command, DoId magicWordMgr,\n              DoId avatar, uint32 zoneId);\n  broadcastMessage() broadcast;\n};\n\ndclass DistributedTestObject : DistributedObject {\n  uint32 AutoInterest[];\n  setParentingRules(string todo0, string todo1) broadcast ram;\n  setRequiredField(uint32 r) required broadcast ram;\n  setB(uint32 B) broadcast;\n  setBA(uint32 BA) broadcast airecv;\n  setBO(uint32 BO) broadcast ownsend;\n  setBR(uint32 BR) broadcast ram;\n  setBRA(uint32 BRA) broadcast ram airecv;\n  setBRO(uint32 BRO) broadcast ram ownsend;\n  setBROA(uint32 BROA) broadcast ram ownsend airecv;\n};\n\nstruct OSInfo {\n  string name;\n  int16 platform;\n  int16 major;\n  int16 minor;\n};\n\nstruct CPUSpeed {\n  int32/1000 maxSpeed;\n  int32/1000 currentSpeed;\n};\n\ndclass TimeManager : DistributedObject {\n  requestServerTime(uint8 context) airecv clsend;\n  serverTime(uint8 context, int32 timestap, uint32 timeOfDay);\n  setDisconnectReason(uint8 disconnectCode) airecv clsend;\n  setExceptionInfo(string(0-1024) info) airecv clsend;\n  setSignature(string(0-1024) signature, char prcHash[16],\n               char pycHash[16]) airecv clsend;\n  setFrameRate(uint16/10 fps, uint16/1000 deviation, uint16 numAvatars,\n               string(0-256) locationCode, uint32/10 timeInLocation,\n               uint32/10 timeInGame, string(0-256) gameOptionsCode,\n               uint16 vendorId, uint16 deviceId, uint32/10 processMemory,\n               uint32/10 pageFileUsage, uint32/10 physicalMemory,\n               uint32 pageFaultCount, OSInfo osInfo, CPUSpeed cpuSpeed, uint16 cpuCores,\n               uint16 logicalCPUs, string(0-256) apiName) airecv clsend;\n  setCpuInfo(string(0-1024) infoStr, string cacheStatus) airecv clsend;\n  checkForGarbageLeaks(bool wantReply) airecv clsend;\n  setNumAIGarbageLeaks(uint32 numLeaks);\n  setClientGarbageLeak(uint32 num, string(0-1024) description) airecv clsend;\n  checkAvOnDistrict(uint32 context, DoId avatar) clsend airecv;\n  checkAvOnDistrictResult(uint32 context, DoId av, bool isOnDistrict);\n};\n\ndclass ObjectServer {\n  setName(string name) airecv ram required;\n  setDcHash(uint32 hash) ram required;\n  setDateCreated(uint32 date) airecv;\n};\n\ndclass DistributedDirectory : DistributedObject {\n  setParentingRules(string todo0, string todo1) broadcast ram;\n};\n\ndclass DistributedDistrict : DistributedObject {\n  setName(string name) required broadcast ram;\n  setAvailable(uint8 available) required broadcast ram;\n};\n\ndclass DistributedNode : DistributedObject {\n  setParentStr(blob parentTokenStr) broadcast ram ownsend airecv;\n  setParent(uint32 parentToken) broadcast ram ownsend airecv;\n  setX(int16/10 x) broadcast ram ownsend airecv;\n  setY(int16/10 y) broadcast ram ownsend airecv;\n  setZ(int16/10 z) broadcast ram ownsend airecv;\n  setH(int16%360/10 h) broadcast ram ownsend airecv;\n  setP(int16%360/10 p) broadcast ram ownsend airecv;\n  setR(int16%360/10 r) broadcast ram ownsend airecv;\n  setPos : setX, setY, setZ;\n  setHpr : setH, setP, setR;\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\n  setXY : setX, setY;\n  setXZ : setX, setZ;\n  setXYH : setX, setY, setH;\n  setXYZH : setX, setY, setZ, setH;\n};\n\ndclass DistributedSmoothNode : DistributedNode {\n  setComponentL(uint64 l) broadcast ram ownsend airecv;\n  setComponentX(int16/10 x) broadcast ram ownsend airecv;\n  setComponentY(int16/10 y) broadcast ram ownsend airecv;\n  setComponentZ(int16/10 z) broadcast ram ownsend airecv;\n  setComponentH(int16%360/10 h) broadcast ram ownsend airecv;\n  setComponentP(int16%360/10 p) broadcast ram ownsend airecv;\n  setComponentR(int16%360/10 r) broadcast ram ownsend airecv;\n  setComponentT(int16 timestamp) broadcast ram ownsend airecv;\n  setSmStop : setComponentT;\n  setSmH : setComponentH, setComponentT;\n  setSmZ : setComponentZ, setComponentT;\n  setSmXY : setComponentX, setComponentY, setComponentT;\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  clearSmoothing(int8 bogus) broadcast ownsend;\n  suggestResync(uint32 avId, int16 timestampA, int16 timestampB, int32 serverTimeSec, uint16 serverTimeUSec, uint16/100 uncertainty) ownrecv clsend;\n  returnResync(uint32 avId, int16 timestampB, int32 serverTimeSec, uint16 serverTimeUSec, uint16/100 uncertainty) ownrecv clsend;\n};\n\ndclass DistributedCartesianGrid : DistributedNode {\n  setCellWidth(uint32 width) required broadcast ram;\n  setParentingRules(string style, string rule) broadcast ram;\n};\n\nstruct Fixture {\n  int32/10 x;\n  int32/10 y;\n  int32/10 z;\n  int16/10 h;\n  int16/10 p;\n  int16/10 r;\n  string state;\n};\n\ndclass DistributedCamera : DistributedNode {\n  setCamParent(uint32 doId) required broadcast ram ownsend airecv;\n  setFixtures(Fixture fixtures[]) required broadcast ram ownsend airecv;\n};\n\nstruct TalkModification {\n  uint16 offset;\n  uint16 size;\n};\n\ndclass TalkPath_owner {\n  setTalk(DoId fromAv, DoId fromAcc, string(0-256) avName,\n          string(0-400) chat, TalkModification [], uint8 flags) broadcast ownsend;\n};\n\ndclass TalkPath_whisper {\n  setTalkWhisper(DoId fromAv, DoId fromAcc, string(0-256) avName,\n                 string(0-400) chat, TalkModification [], uint8 flags) ownrecv clsend;\n};\n\ndclass TalkPath_group {\n  setTalkGroup(DoId fromAv, DoId fromAcc, string(0-256) avName,\n               string(0-400) chat, TalkModification [], uint8 flags) clsend airecv;\n};\n\ndclass TalkPath_account {\n  setTalkAccount(DoId toAcc, DoId fromAcc, string(0-256) avName,\n                 string(0-400) msg, TalkModification [], uint8 flags) airecv clsend;\n};\n\ndclass AvatarHandle : TalkPath_whisper {\n};\n\ndclass DistributedAvatar : DistributedSmoothNode, TalkPath_whisper {\n  setName(string name = "[Name not set]") required broadcast db airecv;\n  friendsNotify(DoId avId, int8 status) ownrecv airecv;\n  checkAvOnShard(DoId avId) clsend airecv;\n  confirmAvOnShard(DoId avId, int8 isOnShard);\n  setTalk(DoId fromAv, DoId fromAcc, string(0-256) avName,\n          string(0-400) chat, TalkModification [], uint8 flags) broadcast;\n  setTalkWhisper(DoId fromAv, DoId fromAcc, string(0-256) avName,\n          string(0-400) chat, TalkModification [], uint8 flags) ownrecv;\n};\n\nstruct FriendEntry {\n  uint32 friendId;\n  uint8 friendType;\n}\n\ndclass DistributedPlayer : DistributedAvatar {\n  arrivedOnDistrict(DoId districtId) ownrecv ram;\n  setAccountName(string name = "") required ownrecv db;\n  setWhisperSCFrom(DoId fromAv, uint16 msgIndex) ownrecv clsend;\n  setWhisperSCCustomFrom(DoId fromAv, uint16 msgIndex) ownrecv clsend;\n  setWhisperSCEmoteFrom(DoId fromAv, uint16 emoteId) ownrecv clsend;\n  setSystemMessage(DoId aboutId, string(0-256) chatString) ownrecv;\n  setCommonChatFlags(uint8 commonChatFlags) broadcast ownrecv ram airecv;\n  setWhitelistChatFlags(uint8 whitelistChatFlags) broadcast ownrecv ram airecv;\n  setSC(uint16 msgIndex) broadcast ownsend airecv;\n  setSCThought(uint16 msgIndex) broadcast ownsend airecv;\n  setSCCustom(uint16 msgIndex) broadcast ownsend airecv;\n  setFriendsList(FriendEntry friendsList[] = []) ownrecv required db airecv;\n  setDISLname(string name) broadcast ownrecv ram;\n  setDISLid(uint32 id = 0) broadcast ownrecv ram db airecv required;\n  OwningAccount(DoId);\n  string WishName = "" db ram;\n  uint8 WishNameState = 1 db ram; // 1 is the "open" state\n  uint32 WishNameTimestamp db ram;\n  setPreviousAccess(uint8 = 0) required db airecv;\n  setAccess(uint8 = 2) broadcast ownrecv required ram airecv;\n  setAdminAccess(uint16 access = 0) ownrecv required airecv;\n  setAsGM(bool state = 0) required ram broadcast ownrecv airecv;\n};\n\ndclass MagicWordManager : DistributedObject {\n  sendMagicWord(string word, uint32 targetId, bool execute) airecv clsend;\n  sendMagicWordResponse(string response);\n};\n\ndclass OtpAvatarManager : DistributedObject {\n  online();\n  requestAvatarList(uint32 todo0) airecv clsend;\n  rejectAvatarList(uint32 result);\n  avatarListResponse(blob pickleData);\n  requestAvatarSlot(uint32 todo0, uint32 todo1, uint8 todo2) clsend airecv;\n  rejectAvatarSlot(uint32 reasonId, uint32 subId, uint8 slot);\n  avatarSlotResponse(uint32 subId, uint8 slot);\n  requestPlayAvatar(uint32 todo0, uint32 todo1, uint32 todo2) clsend airecv;\n  rejectPlayAvatar(uint32 reasonId, uint32 avatarId);\n  playAvatarResponse(uint32 avatarId, uint32 subId, uint8 access, uint8 founder);\n  rejectCreateAvatar(uint32 result);\n  createAvatarResponse(uint32 avatarId, uint32 subId, uint8 access, uint8 founder);\n  requestRemoveAvatar(uint32 todo0, uint32 todo1, uint32 todo2, string(0-256) todo3) airecv clsend;\n  rejectRemoveAvatar(uint32 reasonId);\n  removeAvatarResponse(uint32 avatarId, uint32 subId);\n  requestShareAvatar(uint32 todo0, uint32 todo1, uint32 todo2, uint8 todo3) airecv clsend;\n  rejectShareAvatar(uint32 reasonId);\n  shareAvatarResponse(uint32 avatarId, uint32 subId, uint8 shared);\n};\n\ndclass ChatAgent : DistributedObject {\n  adminChat(uint32 aboutId, string message);\n  chatMessage(string(0-256) message, uint8 chatMode) clsend;\n  whisperMessage(uint32 receiverAvId, string(0-256) message) clsend;\n  sfWhisperMessage(uint32 receiverAvId, string(0-256) message) clsend;\n};\n\ndclass FriendManager : DistributedObject {\n  friendQuery(int32 requested) airecv clsend;\n  cancelFriendQuery(int32 context) airecv clsend;\n  inviteeFriendConsidering(int8 yesNo, int32 context) airecv clsend;\n  inviteeFriendResponse(int8 response, int32 context) airecv clsend;\n  inviteeAcknowledgeCancel(int32 context) airecv clsend;\n  friendConsidering(int8 yesNoAlready, int32 context);\n  friendResponse(int8 yesNoMaybe, int32 context);\n  inviteeFriendQuery(int32 inviterId, string inviterName, blob inviterDna, int32 context);\n  inviteeCancelFriendQuery(int32 context);\n  requestSecret() airecv clsend;\n  requestSecretResponse(int8 result, string secret);\n  submitSecret(string(0-256) secret) airecv clsend;\n  submitSecretResponse(int8 result, int32 avId);\n};\n\nstruct FriendInfo {\n  string avatarName;\n  uint32 avatarId;\n  string playerName;\n  uint8 onlineYesNo;\n  uint8 openChatEnabledYesNo;\n  uint8 openChatFriendshipYesNo;\n  uint8 wlChatEnabledYesNo;\n  string location;\n  string sublocation;\n  uint32 timestamp;\n};\n\nstruct AvatarFriendInfo {\n  string avatarName;\n  string playerName;\n  uint32 playerId;\n  uint8 onlineYesNo;\n  uint8 openChatEnabledYesNo;\n  uint8 openChatFriendshipYesNo;\n  uint8 wlChatEnabledYesNo;\n};\n\nstruct MemberInfo {\n  uint32 avatarId;\n  string avatarName;\n  uint8 avatarRank;\n  uint8 avatarOnline;\n  uint32 bandManagerId;\n  uint32 bandId;\n};\n\nstruct leaderBoardRecordResponces {\n  char found;\n  uint32 id;\n  string text;\n  int32 value;\n};\n\nstruct leaderBoardRecord {\n  uint32 id;\n  string text;\n  int32 value;\n};\n\ndclass LeaderBoardReceiver {\n  getTopTenResponce(string, leaderBoardRecord []);\n  getValuesResponce(string, leaderBoardRecordResponces []);\n};\n\ndclass LeaderBoard : LeaderBoardReceiver {\n  setValue(string [], uint32, string, int32);\n  alterValue(string [], uint32, string, int32);\n  setHighScore(string [], uint32, string, int32);\n  getValues(string, uint32 []);\n  getTopTen(string);\n  getValuesRespondTo(string, uint32 [], uint32);\n  getTopTenRespondTo(string, uint32);\n};\n\ndclass GuildManager : DistributedObject, LeaderBoardReceiver, TalkPath_group {\n  online();\n  guildRejectInvite(uint32 avatarId, uint32 reason);\n  invitationFrom(uint32 avatarId, string avatarName, uint32 guildId, string guildName);\n  requestInvite(uint32 todo0) airecv clsend;\n  memberList() airecv clsend;\n  createGuild() airecv clsend;\n  acceptInvite() airecv clsend;\n  declineInvite() airecv clsend;\n  setWantName(string(0-256) newName) airecv clsend;\n  removeMember(uint32 avatarId) airecv clsend;\n  changeRank(uint32 avatarId, uint8 rank) airecv clsend;\n  changeRankAvocate(uint32 avatarId) airecv clsend;\n  statusRequest() airecv clsend;\n  requestLeaderboardTopTen() airecv clsend;\n  guildStatusUpdate(uint32 guildId, string(0-256) guildName, uint8 guildRank);\n  guildNameReject(uint32 guildId);\n  guildNameChange(string guildName, uint8 changeStatus);\n  receiveMember(MemberInfo member);\n  receiveMembersDone();\n  guildAcceptInvite(uint32 avatarId);\n  guildDeclineInvite(uint32 todo0);\n  updateRep(uint32 todo0, uint32 todo1);\n  leaderboardTopTen(leaderBoardRecord stuff[]);\n  recvAvatarOnline(uint32 avatarId, string avatarName, uint32 bandManagerId, uint32 bandId);\n  recvAvatarOffline(uint32 avatarId, string avatarName);\n  sendChat(string(0-256) todo0, uint8 todo1, uint32 todo2) airecv clsend;\n  sendWLChat(string(0-256) todo0, uint8 todo1, uint32 todo2) airecv clsend;\n  sendSC(uint16 msgIndex) airecv clsend;\n  sendSCQuest(uint16 questInt, uint16 msgType, uint16 taskNum) airecv clsend;\n  recvChat(uint32 todo0, string todo1, uint8 todo2, uint32 todo3);\n  recvWLChat(uint32 todo0, string todo1, uint8 todo2, uint32 todo3);\n  recvSC(uint32 senderId, uint16 msgIndex);\n  recvSCQuest(uint32 senderId, uint16 questInt, uint16 msgType, uint16 taskNum);\n  sendTokenRequest() airecv clsend;\n  recvTokenGenerated(string todo0);\n  recvTokenInviteValue(string tokenValue, int8 preExistPerm);\n  sendTokenForJoinRequest(string(0-256) token, string(0-256) name) airecv clsend;\n  recvTokenRedeemMessage(string guildName);\n  recvTokenRedeemedByPlayerMessage(string redeemerName);\n  sendTokenRValue(string(0-256) todo0, int8 todo1) airecv clsend;\n  sendPermToken() airecv clsend;\n  sendNonPermTokenCount() airecv clsend;\n  recvPermToken(string token);\n  recvNonPermTokenCount(uint8 tCount);\n  sendClearTokens(uint8 todo0) airecv clsend;\n  sendAvatarBandId(uint32 todo0, uint32 todo1, uint32 todo2);\n  recvMemberAdded(MemberInfo memberInfo, uint32 inviterId, string inviterName);\n  notifyGuildKicksMaxed();\n  recvMemberRemoved(uint32 avatarId, uint32 senderId, string avatarName, string senderName);\n  recvMemberUpdateName(uint32 todo0, string todo1);\n  recvMemberUpdateRank(uint32 avatarId, uint32 senderId, string avatarName, string senderName, uint8 rank, bool promote);\n  recvMemberUpdateBandId(uint32 avatarId, uint32 bandManagerId, uint32 bandId);\n  avatarOnline(uint32 todo0, uint16 todo1);\n  avatarOffline(uint32 todo0);\n  reflectTeleportQuery(uint32 todo0, uint32 todo1, uint32 todo2, uint32 todo3, uint32 todo4) clsend airecv;\n  teleportQuery(uint32 requesterId, uint32 requesterBandMgrId, uint32 requesterBandId, uint32 requesterGuildId, uint32 requesterShardId);\n  reflectTeleportResponse(uint32 todo0, int8 todo1, uint32 todo2, uint32 todo3, uint32 todo4) clsend airecv;\n  teleportResponse(uint32 responderId, int8 available, uint32 shardId, uint32 instanceDoId, uint32 areaDoId);\n  requestGuildMatesList(uint32 todo0, uint32 todo1, uint32 todo2);\n  updateAvatarName(uint32 todo0, string todo1);\n  avatarDeleted(uint32 todo0);\n};\n\ndclass AvatarFriendsManager : DistributedObject {\n  online();\n  requestInvite(uint32 avId) airecv clsend;\n  friendConsidering(uint32 avId) airecv clsend;\n  invitationFrom(uint32 avId, string avatarName);\n  retractInvite(uint32 avId);\n  rejectInvite(uint32 avId, uint32 reason);\n  requestRemove(uint32 avId) airecv clsend;\n  rejectRemove(uint32 avId, uint32 reason);\n  updateAvatarFriend(uint32 avId, AvatarFriendInfo info);\n  removeAvatarFriend(uint32 avId);\n  updateAvatarName(uint32 todo0, string todo1);\n  avatarOnline(uint32 todo0, uint32 todo1, string todo2, bool todo3, bool todo4, string todo5, string todo6);\n  avatarOffline(uint32 avId);\n};\n\ndclass PlayerFriendsManager : DistributedObject, TalkPath_account {\n  requestInvite(uint32 todo0, uint32 todo1, uint8 todo2) airecv clsend;\n  invitationFrom(uint32 playerId, string avatarName);\n  retractInvite(uint32 playerId);\n  invitationResponse(uint32 playerId, uint16 respCode, uint32 context);\n  requestDecline(uint32 todo0, uint32 todo1) airecv clsend;\n  requestDeclineWithReason(uint32 todo0, uint32 todo1, uint32 todo2) airecv clsend;\n  requestRemove(uint32 todo0, uint32 todo1) airecv clsend;\n  secretResponse(string secret);\n  rejectSecret(string reason);\n  rejectUseSecret(string reason);\n  updatePlayerFriend(uint32 id, FriendInfo info, uint8 isNewFriend);\n  removePlayerFriend(uint32 id);\n};\n\ndclass SnapshotDispatcher : DistributedObject {\n  online();\n  requestRender(uint32 todo0);\n  avatarDeleted(uint32 todo0);\n  requestNewWork(uint32 todo0);\n  errorFetchingAvatar(uint32 todo0, uint32 todo1);\n  errorRenderingAvatar(uint32 todo0, uint32 todo1);\n  renderSuccessful(uint32 todo0, uint32 todo1);\n};\n\ndclass SnapshotRenderer : DistributedObject {\n  online();\n  requestRender(uint32 todo0, uint32 todo1, string todo2);\n};\n\ndclass SpeedchatRelay : DistributedObject, TalkPath_account {\n  forwardSpeedchat(uint32 todo0, uint8 todo1, uint32 todo2[], uint32 todo3, string(0-256) todo4, uint8 todo5) clsend;\n};\n\ndclass CentralLogger : DistributedObject {\n  sendMessage(string(0-256) category, string(0-1024) event, uint32 targetDISLId, uint32 targetAvId) clsend;\n  logAIGarbage() airecv;\n};\n\ndclass SettingsMgr : DistributedObject {\n  requestAllChangedSettings() airecv clsend;\n  settingChange(string settingName, string valueStr) airecv;\n};\n\ndclass StatusDatabase : DistributedObject {\n  requestOfflineAvatarStatus(uint32 avIds[]) airecv clsend;\n  recvOfflineAvatarStatus(uint32 avId, uint32 lastOnline);\n};\n\ndclass CallbackObject {\n  callback(uint32, bool, uint8);\n};\n\n//Next up is toon.dc...\nfrom direct.distributed import DistributedObjectGlobal\nfrom toontown.ai import WelcomeValleyManager/AI\nfrom toontown.building import DistributedAnimatedProp/AI\nfrom toontown.toon import DistributedToon/AI/UD\nfrom toontown.classicchars import DistributedCCharBase/AI\nfrom toontown.classicchars import DistributedMickey/AI\nfrom toontown.classicchars import DistributedVampireMickey/AI\nfrom toontown.classicchars import DistributedMinnie/AI\nfrom toontown.classicchars import DistributedWitchMinnie/AI\nfrom toontown.classicchars import DistributedGoofy/AI\nfrom toontown.classicchars import DistributedSuperGoofy/AI\nfrom toontown.classicchars import DistributedDaisy/AI\nfrom toontown.classicchars import DistributedSockHopDaisy/AI\nfrom toontown.classicchars import DistributedChip/AI\nfrom toontown.classicchars import DistributedPoliceChip/AI\nfrom toontown.classicchars import DistributedDale/AI\nfrom toontown.classicchars import DistributedJailbirdDale/AI\nfrom toontown.classicchars import DistributedGoofySpeedway/AI\nfrom toontown.classicchars import DistributedDonald/AI\nfrom toontown.classicchars import DistributedFrankenDonald/AI\nfrom toontown.classicchars import DistributedDonaldDock/AI\nfrom toontown.classicchars import DistributedPluto/AI\nfrom toontown.classicchars import DistributedWesternPluto/AI\nfrom toontown.safezone import DistributedTrolley/AI\nfrom toontown.safezone import DistributedPartyGate/AI\nfrom toontown.suit import DistributedSuitPlanner/AI\nfrom toontown.suit import DistributedSuitBase/AI\nfrom toontown.suit import DistributedSuit/AI\nfrom toontown.suit import DistributedTutorialSuit/AI\nfrom toontown.suit import DistributedFactorySuit/AI\nfrom toontown.suit import DistributedMintSuit/AI\nfrom toontown.suit import DistributedStageSuit/AI\nfrom toontown.election import DistributedInvasionSuit/AI\nfrom toontown.suit import DistributedSellbotBoss/AI\nfrom toontown.suit import DistributedCashbotBoss/AI\nfrom toontown.coghq import DistributedCashbotBossSafe/AI\nfrom toontown.coghq import DistributedCashbotBossCrane/AI\nfrom toontown.suit import DistributedCashbotBossGoon/AI\nfrom toontown.battle import DistributedBattleBase/AI\nfrom toontown.battle import DistributedBattle/AI\nfrom toontown.battle import DistributedBattleBldg/AI\nfrom toontown.tutorial import DistributedBattleTutorial/AI\nfrom toontown.coghq import DistributedBattleFactory/AI\nfrom toontown.battle import DistributedBattleFinal/AI\nfrom toontown.safezone import DistributedBoat/AI\nfrom toontown.safezone import DistributedButterfly/AI\nfrom toontown.safezone import DistributedMMPiano/AI\nfrom toontown.safezone import DistributedDGFlower/AI\nfrom toontown.election import DistributedElectionEvent/AI\nfrom toontown.election import DistributedFlippyStand/AI\nfrom toontown.election import DistributedHotAirBalloon/AI\nfrom toontown.toonfest import DistributedToonfestBalloon/AI\nfrom toontown.toonfest import DistributedToonfestTower/AI\nfrom toontown.toonfest import DistributedToonfestTowerBase/AI\n//from toontown.toonfest import DistributedToonfestCog/AI\nfrom toontown.toonfest import DistributedToonfestActivity/AI\nfrom toontown.toonfest import DistributedToonfestTrampolineActivity/AI\nfrom toontown.toonfest import DistributedToonfestVictoryTrampolineActivity/AI\n//from toontown.toonfest import DistributedToonfestCannon/AI\n//from toontown.toonfest import DistributedToonfestCannonActivity/AI\nfrom toontown.election import DistributedSafezoneInvasion/AI\nfrom toontown.election import DistributedElectionCamera/AI\nfrom toontown.election import DistributedElectionCameraManager/AI\nfrom toontown.fishing import DistributedFishingPond/AI\nfrom toontown.fishing import DistributedFishingTarget/AI\nfrom toontown.fishing import DistributedPondBingoManager/AI\nfrom toontown.safezone import DistributedFishingSpot/AI\nfrom toontown.estate import DistributedCannon/AI\nfrom toontown.estate import DistributedTarget/AI\nfrom toontown.minigame import DistributedMinigame/AI\nfrom toontown.minigame import DistributedMinigameTemplate/AI\nfrom toontown.minigame import DistributedRaceGame/AI\nfrom toontown.minigame import DistributedCannonGame/AI\nfrom toontown.minigame import DistributedPhotoGame/AI\nfrom toontown.minigame import DistributedPatternGame/AI\nfrom toontown.minigame import DistributedRingGame/AI\nfrom toontown.minigame import DistributedTagGame/AI\nfrom toontown.minigame import DistributedMazeGame/AI\nfrom toontown.minigame import DistributedTugOfWarGame/AI\nfrom toontown.minigame import DistributedCatchGame/AI\nfrom toontown.minigame import DistributedDivingGame/AI\nfrom toontown.minigame import DistributedTargetGame/AI\nfrom toontown.estate import EstateManager/AI\nfrom toontown.estate import DistributedEstate/AI\nfrom toontown.estate import DistributedHouse/AI\nfrom toontown.estate import DistributedHouseInterior/AI\nfrom toontown.estate import DistributedGarden/AI\nfrom toontown.shtiker import DeleteManager/AI\nfrom toontown.ai import NewsManager/AI\nfrom toontown.shtiker import PurchaseManager/AI\nfrom toontown.shtiker import NewbiePurchaseManager/AI\nfrom toontown.tutorial import TutorialManager/AI\nfrom toontown.catalog import CatalogManager/AI\nfrom toontown.safezone import DistributedTreasure/AI\nfrom toontown.coghq import DistributedCashbotBossTreasure/AI\nfrom toontown.building import DistributedTrophyMgr/AI\nfrom toontown.building import DistributedBuilding/AI\nfrom toontown.building import DistributedAnimBuilding/AI\nfrom toontown.building import DistributedToonInterior/AI\nfrom toontown.building import DistributedToonHallInterior/AI\nfrom toontown.building import DistributedSuitInterior/AI\nfrom toontown.building import DistributedHQInterior/AI\nfrom toontown.building import DistributedGagshopInterior/AI\nfrom toontown.building import DistributedPetshopInterior/AI\nfrom toontown.building import DistributedKartShopInterior/AI\nfrom toontown.building import DistributedDoor/AI\nfrom toontown.building import DistributedAnimDoor/AI\nfrom toontown.estate import DistributedHouseDoor/AI\nfrom toontown.coghq import DistributedCogHQDoor/AI\nfrom toontown.coghq import DistributedSellbotHQDoor/AI\nfrom toontown.toon import DistributedNPCToonBase/AI\nfrom toontown.toon import DistributedNPCToon/AI\nfrom toontown.toon import DistributedNPCSnowballGiver/AI\nfrom toontown.toon import DistributedNPCSpecialQuestGiver/AI\nfrom toontown.toon import DistributedNPCFlippyInToonHall/AI\nfrom toontown.toon import DistributedNPCScientist/AI\nfrom toontown.toon import DistributedNPCClerk/AI\nfrom toontown.toon import DistributedNPCTailor/AI\nfrom toontown.toon import DistributedNPCBlocker/AI\nfrom toontown.toon import DistributedNPCFisherman/AI\nfrom toontown.toon import DistributedNPCPartyPerson/AI\nfrom toontown.toon import DistributedNPCPetclerk/AI\nfrom toontown.toon import DistributedNPCKartClerk/AI\nfrom toontown.building import DistributedKnockKnockDoor/AI\nfrom toontown.building import DistributedElevator/AI\nfrom toontown.building import DistributedElevatorFSM/AI\nfrom toontown.building import DistributedElevatorExt/AI\nfrom toontown.building import DistributedElevatorInt/AI\nfrom toontown.coghq import DistributedFactoryElevatorExt/AI\nfrom toontown.coghq import DistributedMintElevatorExt/AI\nfrom toontown.coghq import DistributedLawOfficeElevatorExt/AI\nfrom toontown.coghq import DistributedLawOfficeElevatorInt/AI\nfrom toontown.building import DistributedElevatorFloor/AI\nfrom toontown.building import DistributedBossElevator/AI\nfrom toontown.building import DistributedVPElevator/AI\nfrom toontown.building import DistributedCFOElevator/AI\nfrom toontown.building import DistributedCJElevator/AI\nfrom toontown.building import DistributedBBElevator/AI\nfrom toontown.building import DistributedBoardingParty/AI\nfrom toontown.building import DistributedTutorialInterior/AI\nfrom toontown.estate import DistributedBankMgr/AI\nfrom toontown.estate import DistributedMailbox/AI\nfrom toontown.estate import DistributedFurnitureManager/AI\nfrom toontown.estate import DistributedFurnitureItem/AI\nfrom toontown.estate import DistributedBank/AI\nfrom toontown.estate import DistributedCloset/AI\nfrom toontown.estate import DistributedTrunk/AI\nfrom toontown.estate import DistributedPhone/AI\nfrom toontown.effects import DistributedFireworkShow/AI\nfrom toontown.estate import DistributedFireworksCannon/AI\nfrom toontown.coghq import LobbyManager/AI\nfrom otp.level import DistributedLevel/AI\nfrom otp.level import DistributedEntity/AI\nfrom otp.level import DistributedInteractiveEntity/AI\nfrom toontown.coghq import DistributedFactory/AI\nfrom toontown.coghq import DistributedLawOffice/AI\nfrom toontown.coghq import DistributedLawOfficeFloor/AI\nfrom toontown.coghq import DistributedLift/AI\nfrom toontown.coghq import DistributedDoorEntity/AI\nfrom toontown.coghq import DistributedSwitch/AI\nfrom toontown.coghq import DistributedButton/AI\nfrom toontown.coghq import DistributedTrigger/AI\nfrom toontown.coghq import DistributedCrushableEntity/AI\nfrom toontown.coghq import DistributedCrusherEntity/AI\nfrom toontown.coghq import DistributedStomper/AI\nfrom toontown.coghq import DistributedStomperPair/AI\nfrom toontown.coghq import DistributedLaserField/AI\nfrom toontown.coghq import DistributedGolfGreenGame/AI\nfrom toontown.coghq import DistributedSecurityCamera/AI\nfrom toontown.coghq import DistributedMover/AI\nfrom toontown.coghq import DistributedElevatorMarker/AI\nfrom toontown.coghq import DistributedBarrelBase/AI\nfrom toontown.coghq import DistributedGagBarrel/AI\nfrom toontown.coghq import DistributedBeanBarrel/AI\nfrom toontown.coghq import DistributedHealBarrel/AI\nfrom toontown.coghq import DistributedGrid/AI\nfrom toontown.coghq import ActiveCell/AI\nfrom toontown.coghq import DirectionalCell/AI\nfrom toontown.coghq import CrusherCell/AI\nfrom toontown.coghq import DistributedCrate/AI\nfrom toontown.coghq import DistributedSinkingPlatform/AI\nfrom toontown.suit import DistributedGoon/AI\nfrom toontown.suit import DistributedGridGoon/AI\nfrom toontown.coghq import BattleBlocker/AI\nfrom toontown.ai import DistributedBlackCatMgr/AI\nfrom toontown.ai import DistributedPolarBearMgr/AI\nfrom toontown.ai import DistributedPolarPlaceEffectMgr/AI\nfrom toontown.ai import DistributedGreenToonEffectMgr/AI\nfrom toontown.ai import DistributedResistanceEmoteMgr/AI\nfrom toontown.ai import DistributedScavengerHuntTarget/AI\nfrom toontown.ai import DistributedTrickOrTreatTarget/AI\nfrom toontown.ai import DistributedWinterCarolingTarget/AI\nfrom toontown.coghq import DistributedMint/AI\nfrom toontown.coghq import DistributedMintRoom/AI\nfrom toontown.coghq import DistributedMintBattle/AI\nfrom toontown.coghq import DistributedStage/AI\nfrom toontown.coghq import DistributedStageRoom/AI\nfrom toontown.coghq import DistributedStageBattle/AI\nfrom toontown.pets.PetDCImports/AI import *\nfrom toontown.pets import DistributedPetProxy/AI\nfrom toontown.coghq.InGameEditorDCImports/AI import *\nfrom toontown.distributed import ToontownDistrict/AI\nfrom toontown.distributed import ToontownDistrictStats/AI\nfrom toontown.racing import DistributedVehicle/AI\nfrom toontown.racing import DistributedStartingBlock/AI\nfrom toontown.racing import DistributedRace/AI\nfrom toontown.racing import DistributedKartPad/AI\nfrom toontown.racing import DistributedRacePad/AI\nfrom toontown.racing import DistributedViewPad/AI\nfrom toontown.racing import DistributedStartingBlock/AI\nfrom toontown.racing import DistributedLeaderBoard/AI\nfrom toontown.racing import DistributedGag/AI\nfrom toontown.racing import DistributedProjectile/AI\nfrom toontown.racing.DistributedStartingBlock/AI import DistributedViewingBlock/AI\nfrom toontown.uberdog.ClientServicesManager/UD import ClientServicesManager/UD\nfrom toontown.uberdog.DistributedDeliveryManager/AI/UD import DistributedDeliveryManager/AI/UD\nfrom toontown.uberdog.DistributedDataStoreManager/AI/UD import DistributedDataStoreManager/AI/UD\nfrom toontown.suit import DistributedLawbotBoss/AI\nfrom toontown.coghq import DistributedLawbotBossGavel/AI\nfrom toontown.suit import DistributedLawbotBossSuit/AI\nfrom toontown.coghq import DistributedLawbotCannon/AI\nfrom toontown.coghq import DistributedLawbotChair/AI\nfrom toontown.estate import DistributedLawnDecor/AI\nfrom toontown.estate import DistributedGardenPlot/AI\nfrom toontown.estate import DistributedGardenBox/AI\nfrom toontown.estate import DistributedFlower/AI\nfrom toontown.estate import DistributedGagTree/AI\nfrom toontown.estate import DistributedStatuary/AI\nfrom toontown.estate import DistributedToonStatuary/AI\nfrom toontown.estate import DistributedChangingStatuary/AI\nfrom toontown.estate import DistributedAnimatedStatuary/AI\nfrom toontown.estate import DistributedPlantBase/AI\nfrom toontown.estate import DistributedLawnDecor/AI\nfrom toontown.minigame import DistributedTravelGame/AI\nfrom toontown.minigame import DistributedPairingGame/AI\nfrom toontown.minigame import DistributedVineGame/AI\nfrom toontown.golf import DistributedPhysicsWorld/AI\nfrom toontown.golf import DistributedGolfHole/AI\nfrom toontown.golf import DistributedGolfCourse/AI\nfrom toontown.parties import DistributedParty/AI\nfrom toontown.parties import DistributedPartyActivity/AI\nfrom toontown.parties import DistributedPartyTeamActivity/AI\nfrom toontown.parties import DistributedPartyCannon/AI\nfrom toontown.parties import DistributedPartyCannonActivity/AI\nfrom toontown.parties import DistributedPartyCatchActivity/AI\nfrom toontown.parties import DistributedPartyWinterCatchActivity/AI\nfrom toontown.parties import DistributedPartyCogActivity/AI\nfrom toontown.parties import DistributedPartyWinterCogActivity/AI\nfrom toontown.parties import DistributedPartyFireworksActivity/AI\nfrom toontown.parties import DistributedPartyDanceActivityBase/AI\nfrom toontown.parties import DistributedPartyDanceActivity/AI\nfrom toontown.parties import DistributedPartyDance20Activity/AI\nfrom toontown.parties import DistributedPartyValentineDanceActivity/AI\nfrom toontown.parties import DistributedPartyValentineDance20Activity/AI\nfrom toontown.parties import DistributedPartyTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyValentineTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyVictoryTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyWinterTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyTugOfWarActivity/AI\nfrom toontown.parties import DistributedPartyJukeboxActivityBase/AI\nfrom toontown.parties import DistributedPartyJukeboxActivity/AI\nfrom toontown.parties import DistributedPartyJukebox40Activity/AI\nfrom toontown.parties import DistributedPartyValentineJukeboxActivity/AI\nfrom toontown.parties import DistributedPartyValentineJukebox40Activity/AI\nfrom toontown.friends import TTPlayerFriendsManager/UD\nfrom toontown.friends import TTRFriendsManager/UD\nfrom toontown.uberdog import TTSpeedchatRelay/UD\nfrom toontown.safezone import DistributedGolfKart/AI\nfrom toontown.safezone import DistributedPicnicBasket/AI\nfrom toontown.distributed import DistributedTimer/AI\nfrom toontown.suit import DistributedBossbotBoss/AI\nfrom toontown.coghq import DistributedCogKart/AI\nfrom toontown.coghq import DistributedCountryClub/AI\nfrom toontown.coghq import DistributedCountryClubRoom/AI\nfrom toontown.coghq import DistributedMoleField/AI\nfrom toontown.coghq import DistributedCountryClubBattle/AI\nfrom toontown.building import DistributedClubElevator/AI\nfrom toontown.coghq import DistributedMaze/AI\nfrom toontown.battle import DistributedBattleWaiters/AI\nfrom toontown.coghq import DistributedFoodBelt/AI\nfrom toontown.coghq import DistributedBanquetTable/AI\nfrom toontown.battle import DistributedBattleDiners/AI\nfrom toontown.coghq import DistributedGolfSpot/AI\nfrom toontown.minigame import DistributedIceGame/AI\nfrom toontown.minigame import DistributedCogThiefGame/AI\nfrom toontown.minigame import DistributedTwoDGame/AI\nfrom toontown.safezone import DistributedPicnicTable/AI\nfrom toontown.safezone import DistributedChineseCheckers/AI\nfrom toontown.safezone import DistributedCheckers/AI\nfrom toontown.safezone import DistributedFindFour/AI\nfrom toontown.uberdog.DistributedMailManager/AI/UD import DistributedMailManager/AI/UD\nfrom toontown.uberdog.DistributedPartyManager/AI/UD import DistributedPartyManager/AI/UD\nfrom toontown.rpc.AwardManager/UD import AwardManager/UD\nfrom toontown.uberdog.DistributedCpuInfoMgr/AI/UD import DistributedCpuInfoMgr/AI/UD\nfrom toontown.uberdog.DistributedSecurityMgr/AI/UD import DistributedSecurityMgr/AI/UD\nfrom toontown.rpc.RATManager/UD import RATManager/UD\nfrom toontown.uberdog.DistributedInGameNewsMgr/AI/UD import DistributedInGameNewsMgr/AI/UD\nfrom toontown.uberdog.DistributedWhitelistMgr/AI/UD import DistributedWhitelistMgr/AI/UD\nfrom toontown.coderedemption.TTCodeRedemptionMgr/AI/UD import TTCodeRedemptionMgr/AI/UD\nfrom toontown.distributed.NonRepeatableRandomSourceAI import NonRepeatableRandomSourceAI\nfrom toontown.distributed.NonRepeatableRandomSourceUD import NonRepeatableRandomSourceUD\nfrom toontown.ai.DistributedPhaseEventMgr/AI import DistributedPhaseEventMgr/AI\nfrom toontown.ai.DistributedHydrantZeroMgr/AI import DistributedHydrantZeroMgr/AI\nfrom toontown.ai.DistributedMailboxZeroMgr/AI import DistributedMailboxZeroMgr/AI\nfrom toontown.ai.DistributedTrashcanZeroMgr/AI import DistributedTrashcanZeroMgr/AI\nfrom toontown.ai import DistributedSillyMeterMgr/AI\nfrom toontown.cogdominium import DistributedCogdoInterior/AI\nfrom toontown.cogdominium import DistributedCogdoBattleBldg/AI\nfrom toontown.cogdominium import DistributedCogdoElevatorExt/AI\nfrom toontown.cogdominium import DistributedCogdoElevatorInt/AI\nfrom toontown.cogdominium import DistributedCogdoBarrel/AI\nfrom toontown.cogdominium import DistCogdoGame/AI\nfrom toontown.cogdominium import DistCogdoLevelGame/AI\nfrom toontown.cogdominium import DistCogdoBoardroomGame/AI\nfrom toontown.cogdominium import DistCogdoCraneGame/AI\nfrom toontown.cogdominium import DistCogdoMazeGame/AI\nfrom toontown.cogdominium import DistCogdoFlyingGame/AI\nfrom toontown.cogdominium import DistCogdoCrane/AI\nfrom toontown.cogdominium import DistCogdoCraneMoneyBag/AI\nfrom toontown.cogdominium import DistCogdoCraneCog/AI\nfrom toontown.parties.GlobalPartyManager/AI/UD import GlobalPartyManager/AI/UD\nfrom toontown.uberdog.ARGManager/AI/UD import ARGManager/AI/UD\n\nstruct GiftItem {\n  blob Item;\n  string giftTag;\n};\n\nstruct gardenSpecial {\n  uint8 index;\n  uint8 count;\n};\n\nstruct simpleMail {\n  uint64 msgId;\n  uint32 senderId;\n  uint16 year;\n  uint8 month;\n  uint8 day;\n  string body;\n};\n\nstruct invite {\n  uint64 inviteKey;\n  uint64 partyId;\n  uint8 status;\n};\n\nstruct decoration {\n  uint8 decorId;\n  uint8 x;\n  uint8 y;\n  uint8 h;\n};\n\nstruct activity {\n  uint8 activityId;\n  uint8 x;\n  uint8 y;\n  uint8 h;\n};\n\nstruct party {\n  uint64 partyId;\n  uint32 hostId;\n  uint16 startYear;\n  uint8 startMonth;\n  uint8 startDay;\n  uint8 startHour;\n  uint8 startMinute;\n  uint16 endYear;\n  uint8 endMonth;\n  uint8 endDay;\n  uint8 endHour;\n  uint8 endMinute;\n  uint8 isPrivate;\n  uint8 inviteTheme;\n  activity activities[];\n  decoration decors[];\n  uint8 status;\n};\n\nstruct partyReply {\n  uint32 inviteeId;\n  uint8 status;\n};\n\nstruct repliesForOneParty {\n  uint64 partyId;\n  partyReply partyReplies[];\n};\n\nstruct publicPartyInfo {\n  uint32 shardId;\n  uint32 zoneId;\n  uint8 numberOfGuests;\n  string hostName;\n  uint8[] activityIds;\n  uint16 minLeft;\n};\n\nstruct jukeboxSongInfo {\n  uint8/10 phase;\n  string fileName;\n};\n\nstruct partyCloudColor {\n  uint16 cloudNumber;\n  uint8/100 r;\n  uint8/100 g;\n  uint8/100 b;\n};\n\nstruct datetime {\n  uint16 year;\n  uint8 month;\n  uint8 day;\n  uint8 hour;\n  uint8 minutes;\n  uint8 seconds;\n};\n\ndclass ToontownDistrict : DistributedDistrict {\n  setParentingRules(string, string) broadcast ram;\n  allowAHNNLog(bool allow) broadcast required ram;\n  rpcSetAvailable(bool available) airecv;\n};\n\ndclass ToontownDistrictStats : DistributedObject {\n  settoontownDistrictId(uint32 value) broadcast required ram;\n  setAvatarCount(uint32 avatarCount) broadcast required ram;\n  setNewAvatarCount(uint32 newAvatarCount) broadcast required ram;\n  setStats : setAvatarCount, setNewAvatarCount;\n};\n\ndclass WelcomeValleyManager : DistributedObject {\n  clientSetZone(uint32 todo0) airecv clsend;\n  requestZoneIdMessage(uint32 origZoneId, uint16 context) airecv clsend;\n  requestZoneIdResponse(uint32 zoneId, uint16 context);\n};\n\ndclass DistributedAnimatedProp : DistributedObject {\n  setPropId(uint16 propId) required broadcast ram;\n  setAvatarInteract(uint32 avatarId) required broadcast ram;\n  requestInteract() airecv clsend;\n  rejectInteract();\n  requestExit() airecv clsend;\n  avatarExit(uint32 avatarId) broadcast;\n  setState(string state, int16 timestamp) required broadcast ram;\n};\n\ntypedef int16 pair16[2];\n\ndclass DistributedToon : DistributedPlayer {\n  setWantBetaKeyQuest(uint8 = 0) required db airecv;\n  setWebAccountId(string) required airecv;\n  setDNAString(blob dnaString) required broadcast ownrecv db;\n  setGM(uint8 type = 0) required broadcast ownrecv db;\n  setMaxBankMoney(int16 maxMoney = 15000) required broadcast ownrecv db;\n  setBankMoney(int16 money = 0) required broadcast ownrecv db;\n  setMaxMoney(int16 maxMoney = 40) required broadcast ownrecv db;\n  setMoney(int16 money = 0) required broadcast ownrecv db;\n  setMaxTokens(int16 maxTokens = 32000) required broadcast ownrecv db;\n  setTokens(int16 tokens = 0) required broadcast ownrecv db;\n  setMaxHp(int16 hitPoints = 15) required broadcast ownrecv db;\n  setHp(int16 hp = 15) required broadcast ownrecv db;\n  toonUp(uint16 hpGained) broadcast ownrecv;\n  takeDamage(uint16 hpLost) broadcast ownrecv;\n  setBattleId(uint32 battleId = 0) required broadcast ram;\n  setExperience(blob experience = [0*14]) required broadcast db;\n  setMaxCarry(uint8 maxCarry = 20) required ownrecv db;\n  setTrackAccess(uint16 trackArray[] = [0,0,0,0,1,1,0]) required broadcast ownrecv db;\n  setTrackProgress(int8 trackId = -1, uint32 progress = 0) required ownrecv db;\n  setTrackBonusLevel(int8 trackArray[] = [-1,-1,-1,-1,-1,-1,-1]) required broadcast ownrecv db;\n  setInventory(blob inventoryNetString = [0*7, 0*7, 0*7, 0*7, 1, 0*6, 1, 0*6, 0*7]) required broadcast db;\n  setMaxNPCFriends(uint16 max = 16) required ownrecv db;\n  setNPCFriendsDict(FriendEntry NPCFriendsList[] = []) required ownrecv db;\n  setDefaultShard(uint32 shard = 0) required ownrecv broadcast db;\n  setDefaultZone(uint32 zoneId = 0) required ownrecv broadcast db;\n  setShtickerBook(blob str = []) required ownrecv db;\n  setZonesVisited(uint32 hoods[] = [ 2000 ]) required ownrecv db;\n  setHoodsVisited(uint32 hoods[] = [ 2000 ]) required ownrecv db;\n  setInterface(blob str = []) required ownrecv db;\n  setLastHood(uint32 lastHood = 0) required ownrecv broadcast db;\n  setTutorialAck(uint8 tutorialAck = 0) required ownrecv db;\n  setMaxClothes(uint32 max = 10) required ownrecv db;\n  setClothesTopsList(uint8 clothesList[] = []) required ownrecv db;\n  setClothesBottomsList(uint8 clothesList[] = []) required ownrecv db;\n  setMaxAccessories(uint32 max = 0) required ownrecv db;\n  setHatList(uint8 clothesList[] = []) required ownrecv db;\n  setGlassesList(uint8 clothesList[] = []) required ownrecv db;\n  setBackpackList(uint8 clothesList[] = []) required ownrecv db;\n  setShoesList(uint8 clothesList[] = []) required ownrecv db;\n  setHat(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\n  setGlasses(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\n  setBackpack(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\n  setShoes(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\n  setGardenSpecials(gardenSpecial specials[] = []) required ownrecv db airecv;\n  setEarnedExperience(uint16 earnedExp[]) ownrecv;\n  setTunnelIn(int16 timestamp, int16/10 endX, int16/10 x, int16/10 y, int16/100 z, int32/100 h) ownsend broadcast;\n  setTunnelOut(int16 timestamp, int16/10 startX, int16/10 startY, int16/10 x, int16/10 y, int16/100 z, int32/100 h) ownsend broadcast;\n  setAnimState(char animName[0-1024], int16/1000 animMultiplier, int16 timestamp) broadcast ram ownsend airecv;\n  setEmoteState(int16 animIndex, int16/1000 animMultiplier, int16 timestamp) broadcast ram ownsend;\n  setEmoteAccess(uint8 bits[] = [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) required ownrecv db;\n  setCustomMessages(uint16 customMessages[] = []) required ownrecv db;\n  setSleepAutoReply(uint32 fromId) broadcast clsend ownrecv;\n  setResistanceMessages(pair16 resistanceMessages[] = []) required ownrecv db;\n  setPetTrickPhrases(uint8 tricks[] = [0]) required ownrecv db;\n  setCatalogSchedule(uint16 currentWeek = 0, uint32 nextTime = 0) required ownrecv db;\n  setCatalog(blob monthlyCatalog = [], blob weeklyCatalog = [], blob backCatalog = []) required ownrecv db;\n  setMailboxContents(blob mailboxContents = []) required ownrecv db;\n  setDeliverySchedule(blob onOrder = []) required ownrecv db airecv;\n  setGiftSchedule(blob onGiftOrder = []) required ownrecv db airecv;\n  setAwardMailboxContents(blob awardMailboxContents = []) required ownrecv db;\n  setAwardSchedule(blob onOrder = []) required ownrecv db airecv;\n  setAwardNotify(uint8 awardNotify = 0) required ownrecv db;\n  setCatalogNotify(uint8 catalogNotify = 0, uint8 mailboxNotify = 0) required ownrecv db;\n  playSplashEffect(int16/10 x, int16/10 y, int16/10 z) broadcast ownsend;\n  setWhisperSCToontaskFrom(uint32 fromId, uint32 taskId, uint32 toNpcId, uint32 toonProgress, uint8 msgIndex) ownrecv clsend;\n  setSCToontask(uint32 taskId, uint32 toNpcId, uint32 toonProgress, uint8 msgIndex) broadcast ownsend;\n  reqSCResistance(uint16 msgIndex, uint32 nearbyPlayers[]) ownsend airecv;\n  setSCResistance(uint16 msgIndex, uint32 nearbyToons[]) broadcast ownrecv;\n  setSpeedChatStyleIndex(uint8 index = 1) required ownsend broadcast db;\n  setTrophyScore(uint16 score) broadcast ownrecv ram;\n  setTeleportAccess(uint32 teleportZoneArray[] = []) required ownrecv db;\n  checkTeleportAccess(uint16 zoneId) airecv ownsend;\n  setTeleportOverride(uint8 flag) clsend airecv;\n  battleSOS(uint32 requesterId) ownrecv clsend;\n  teleportQuery(uint32 requesterId) ownrecv clsend;\n  teleportResponse(uint32 avId, int8 available, uint32 shardId, uint32 hoodId, uint32 zoneId) ownrecv clsend;\n  teleportResponseToAI(uint32 toAvId, int8 available, uint32 shardId, uint32 hoodId, uint32 zoneId, uint32 fromAvId) ownsend airecv;\n  teleportGiveup(uint32 requesterId) ownrecv clsend;\n  teleportGreeting(uint32 avId) broadcast ownsend;\n  setCogStatus(uint32 cogStatusList[] = [1 * 32]) required ownrecv db;\n  setCogCount(uint32 cogCountList[] = [0 * 32]) required ownrecv db;\n  setCogRadar(uint8 radar[] = [0 * 4]) required ownrecv db;\n  setBuildingRadar(uint8 radar[] = [0 * 4]) required ownrecv db;\n  setCogLevels(uint8 levels[] = [0 * 4]) required broadcast ownrecv db;\n  setCogTypes(uint8 types[] = [0 * 4]) required broadcast ownrecv db;\n  setCogParts(uint32 parts[] = [0 * 4]) required broadcast ownrecv db;\n  setCogMerits(uint16 merits[] = [0 * 4]) required ownrecv db;\n  setCogIndex(int8 index) broadcast ram;\n  setDisguisePageFlag(int8 flag) ownrecv;\n  setSosPageFlag(int8 flag) ownrecv;\n  setHouseId(uint32 id = 0) required ownrecv db;\n  setQuests(uint32 flattenedQuests[] = []) required broadcast ownrecv db;\n  setQuestHistory(uint16 questList[] = []) required ownrecv db;\n  setRewardHistory(uint8 rewardTier = 0, uint16 rewardList[] = [100]) required ownrecv db;\n  setQuestCarryLimit(uint8 limit = 1) required ownrecv db;\n  requestDeleteQuest(uint32 questDesc[]) ownsend airecv;\n  setCheesyEffect(int16 effect = 0, uint32 hoodId = 0, uint32 expireTime = 0) required broadcast ownrecv db;\n  setGhostMode(uint8 flag) broadcast ownrecv ram;\n  setPosIndex(uint8 index = 0) required ownrecv db;\n  setFishCollection(uint8 genusList[] = [], uint8 speciesList[] = [], uint16 weightList[] = []) required ownrecv db;\n  setMaxFishTank(uint8 maxTank = 20) required ownrecv db;\n  setFishTank(uint8 genusList[] = [], uint8 speciesList[] = [], uint16 weightList[] = []) required ownrecv db;\n  setFishingRod(uint8 rodId = 0) required broadcast ownrecv db;\n  setFishingTrophies(uint8 trophyList[] = []) required ownrecv db;\n  setFlowerCollection(uint8 speciesList[] = [], uint8 varietyList[] = []) required ownrecv db;\n  setFlowerBasket(uint8 speciesList[] = [], uint8 varietyList[] = []) required ownrecv db;\n  setMaxFlowerBasket(uint8 maxFlowerBasket = 20) required ownrecv db;\n  setGardenTrophies(uint8 trophyList[] = []) required ownrecv db;\n  setShovel(uint8 shovelId = 0) required broadcast ownrecv db;\n  setShovelSkill(uint32 skillLevel = 0) required ownrecv db;\n  setWateringCan(uint8 wateringCanId = 0) required broadcast ownrecv db;\n  setWateringCanSkill(uint32 skillLevel = 0) required ownrecv db;\n  promoteShovel(uint8 shovel) ownrecv;\n  promoteWateringCan(uint8 wateringCan) ownrecv;\n  reactivateWater() ownrecv;\n  presentPie(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int32 timestamp) broadcast ownsend;\n  tossPie(int16/10 x, int16/10 y, int16/10 z, int16/10 h, uint8 sequence, uint8 power, uint8 throwType, int32 timestamp) broadcast ownsend;\n  pieSplat(int16/10 x, int16/10 y, int16/10 z, uint8 sequence, uint8 pieCode, int32 timestamp32) broadcast ownsend;\n  setPieType(uint8 pieType) broadcast ownrecv ram;\n  setNumPies(uint16 numPies) broadcast ownrecv ram;\n  setPieThrowType(uint8 throwType) broadcast ownrecv ram;\n  setHealthDisplay(uint8 mode) broadcast ownrecv ram;\n  catalogGenClothes(uint32 avId) broadcast ownrecv;\n  catalogGenAccessories(uint32 avId) broadcast ownrecv;\n  setPetId(uint32 petId = 0) required broadcast ownrecv db;\n  setPetMovie(uint32 petId, uint8 flag) ownsend airecv;\n  setPetTutorialDone(uint8 bDone = 0) required ownsend airecv db;\n  setFishBingoTutorialDone(uint8 bDone = 0) required ownsend airecv db;\n  setFishBingoMarkTutorialDone(uint8 bDone = 0) required ownsend airecv db;\n  setKartBodyType(int8 bodyType = -1) required broadcast ownrecv db;\n  setKartBodyColor(int8 bodyColor = -1) required broadcast ownrecv db;\n  setKartAccessoryColor(int8 accColor = -1) required broadcast ownrecv db;\n  setKartEngineBlockType(int8 ebType = -1) required broadcast ownrecv db;\n  setKartSpoilerType(int8 spType = -1) required broadcast ownrecv db;\n  setKartFrontWheelWellType(int8 fwwType = -1) required broadcast ownrecv db;\n  setKartBackWheelWellType(int8 bwwType = -1) required broadcast ownrecv db;\n  setKartRimType(int8 rimsType = -1) required broadcast ownrecv db;\n  setKartDecalType(int8 decalType = -1) required broadcast ownrecv db;\n  updateKartDNAField(int8 dnaField, int8 fieldValue) ownsend airecv;\n  addOwnedAccessory(int8 accessoryId) ownsend airecv;\n  removeOwnedAccessory(int8 accessoryId) ownsend airecv;\n  setTickets(uint32 numTickets = 200) required broadcast ownrecv db;\n  setKartingHistory(uint8 history[16] = [0*16]) required ownrecv db;\n  setKartingTrophies(uint8 trophyList[33] = [0*33]) required ownrecv db;\n  setKartingPersonalBest(uint32/1000 bestTimes[6] = [0*6]) required ownrecv db;\n  setKartingPersonalBest2(uint32/1000 bestTimes2[12] = [0*12]) required ownrecv db;\n  setKartAccessoriesOwned(int8 accessories[16] = [-1*16]) required broadcast ownrecv db;\n  setCurrentKart(uint32 avId) broadcast ownrecv ram;\n  squish(uint8 damage) ownsend airecv;\n  announceBingo() broadcast ownrecv;\n  trickOrTreatTargetMet(uint32 beanAmount) ownrecv;\n  trickOrTreatMilestoneMet() ownrecv;\n  winterCarolingTargetMet(uint32 beanAmount) ownrecv;\n  setCogSummonsEarned(uint8 cogSummonsEarned[] = [0*32]) required ownrecv db;\n  reqCogSummons(char type[0-256], uint32 suitIndex) ownsend airecv;\n  cogSummonsResponse(string returnCode, uint32 suitIndex, uint32 doId) ownrecv;\n  reqUseSpecial(int32 special) ownsend airecv;\n  useSpecialResponse(string returnCode) ownrecv;\n  setGardenStarted(uint8 bStarted = 0) required ownrecv db;\n  sendToGolfCourse(uint32 zoneId) ownrecv;\n  setGolfHistory(uint16 history[18] = [0*18]) required ownrecv db;\n  setPackedGolfHoleBest(uint8 packedHoleBest[18] = [0*18]) required ownrecv db;\n  setGolfCourseBest(uint8 courseBest[3] = [0*3]) required ownrecv db;\n  setUnlimitedSwing(uint8 unlimitedSwing) broadcast ownrecv ram;\n  logSuspiciousEvent(char eventName[0-1024]) ownsend airecv;\n  logMessage(char message[0-1024]) ownsend airecv;\n  forceLogoutWithNotify() ownrecv;\n  setPinkSlips(uint8 pinkSlips = 0) required ownrecv db;\n  setNametagStyle(uint8 nametagStyle = 100) required broadcast ownrecv db;\n  setMail(simpleMail mail[]) ownrecv;\n  setNumMailItems(uint32 numMailItems) airecv;\n  setSimpleMailNotify(uint8 simpleMailNotify) ownrecv airecv;\n  setInvites(invite invites[]) ownrecv airecv ram;\n  setPartiesInvitedTo(party partiesInvitedTo[]) ownrecv airecv ram;\n  setHostedParties(party hostedParties[]) ownrecv airecv ram;\n  setPartyReplies(repliesForOneParty replies[]) ownrecv airecv ram;\n  updateInvite(uint64 inviteKey, uint8 newStatus) ownrecv airecv;\n  updateReply(uint64 partyId, uint64 inviteeId, uint8 newStatus) ownrecv airecv;\n  setPartyCanStart(uint64 partyId) ownrecv airecv;\n  setPartyStatus(uint64 partyId, uint8 newStatus) ownrecv airecv;\n  announcePartyStarted(uint64 partyId) ownrecv;\n  setNeverStartedPartyRefunded(uint64 partyId, int8 newStatus, uint16 refund) ownrecv;\n  setModuleInfo(string info[]) airecv clsend;\n  setDISLname(string name) ram;\n  setDISLid(uint32 id) ram db airecv;\n  flagAv(uint32 avId, uint16 reason, string params[]) airecv ownsend;\n  magicFanfare() broadcast;\n  magicTeleportRequest(uint32 requesterId) ownrecv;\n  magicTeleportResponse(uint32 requesterId, uint32 hoodId) ownsend airecv;\n  magicTeleportInitiate(uint32 hoodId, uint32 zoneId) ownrecv;\n  keepAlive() ownsend airecv;\n  setLastSeen(uint32 timestamp = 0) required db;\n};\n\ndclass DistributedCCharBase : DistributedObject {\n  setChat(uint32 category, uint32 msg, uint32 avId) broadcast;\n  fadeAway() broadcast;\n  setWalk(string srcNode, string destNode, int16 timestamp) required broadcast ram;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  setNearbyAvatarChat(char msg[0-1024]) airecv clsend;\n  setNearbyAvatarSC(uint16 msgIndex) airecv clsend;\n  setNearbyAvatarSCCustom(uint16 msgIndex) airecv clsend;\n  setNearbyAvatarSCToontask(uint32 taskId, uint32 toNpcId, uint32 toonProgress, uint8 msgIndex) airecv clsend;\n};\n\ndclass DistributedMickey : DistributedCCharBase {\n};\n\ndclass DistributedVampireMickey : DistributedMickey {\n};\n\ndclass DistributedWitchMinnie : DistributedMickey {\n};\n\ndclass DistributedMinnie : DistributedCCharBase {\n};\n\ndclass DistributedGoofy : DistributedCCharBase {\n};\n\ndclass DistributedDaisy : DistributedCCharBase {\n};\n\ndclass DistributedSockHopDaisy : DistributedDaisy {\n};\n\ndclass DistributedChip : DistributedCCharBase {\n};\n\ndclass DistributedPoliceChip : DistributedChip {\n};\n\ndclass DistributedDale : DistributedCCharBase {\n  setFollowChip(string srcNode, string destNode, int16 timestamp, int16/100 offsetX, int16/100 offsetY) broadcast ram;\n  setChipId(uint32 chipId) required broadcast ram;\n};\n\ndclass DistributedJailbirdDale : DistributedDale {\n};\n\ndclass DistributedDonald : DistributedCCharBase {\n};\n\ndclass DistributedFrankenDonald : DistributedDonald {\n};\n\ndclass DistributedDonaldDock : DistributedCCharBase {\n};\n\ndclass DistributedPluto : DistributedCCharBase {\n};\n\ndclass DistributedWesternPluto : DistributedPluto {\n};\n\ndclass DistributedGoofySpeedway : DistributedCCharBase {\n};\n\ndclass DistributedSuperGoofy : DistributedGoofySpeedway {\n};\n\ndclass DistributedPartyGate : DistributedObject {\n  getPartyList(uint32 avId) airecv clsend;\n  partyChoiceRequest(uint32 avId, uint64 shardId, uint64 zoneId) airecv clsend;\n  listAllPublicParties(publicPartyInfo publicPartyInfo[]);\n  partyRequestDenied(uint8 reason);\n  setParty(publicPartyInfo partyInfoTuple, uint32 hostId);\n};\n\ndclass DistributedTrolley : DistributedObject {\n  setState(string state, int16 timestamp) broadcast ram;\n  fillSlot0(uint32 avId) broadcast ram;\n  fillSlot1(uint32 avId) broadcast ram;\n  fillSlot2(uint32 avId) broadcast ram;\n  fillSlot3(uint32 avId) broadcast ram;\n  emptySlot0(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot1(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot2(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot3(uint32 avId, int16 timestamp) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32 avId);\n  requestExit() airecv clsend;\n  setMinigameZone(uint32 zoneId, uint16 minigameId);\n};\n\ndclass DistributedSuitPlanner : DistributedObject {\n  setZoneId(uint32 zoneId) required broadcast ram;\n  suitListQuery() airecv clsend;\n  suitListResponse(uint8 suitList[]);\n  buildingListQuery() airecv clsend;\n  buildingListResponse(uint8 buildingList[]);\n};\n\ndclass DistributedSuitBase : DistributedObject {\n  denyBattle();\n  setDNAString(blob dnaString) required broadcast ram;\n  setLevelDist(int16 level) required broadcast ram;\n  setBrushOff(int16 index) broadcast;\n  setSkelecog(uint8 flag) required broadcast ram;\n  setSkeleRevives(uint8 num) required broadcast ram;\n  setHP(int16 hp) required broadcast ram;\n};\n\ndclass DistributedSuit : DistributedSuitBase {\n  requestBattle(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) airecv clsend;\n  setSPDoId(uint32 doId) required broadcast ram;\n  setPathEndpoints(uint16 start, uint16 end, uint16 minPathLen, uint16 maxPathLen) required broadcast ram;\n  setPathPosition(uint16 index, int16 timestamp) required broadcast ram;\n  setPathState(int8 state) required broadcast ram;\n  debugSuitPosition(int16/10 elapsed, int16 currentLeg, int16/10 x, int16/10 y, int16 timestamp) broadcast;\n};\n\ndclass DistributedTutorialSuit : DistributedSuitBase {\n  requestBattle(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) airecv clsend;\n};\n\ndclass DistributedFactorySuit : DistributedSuitBase {\n  setLevelDoId(uint32 levelDoId) required broadcast ram;\n  setCogId(uint32 cogId) required broadcast ram;\n  setReserve(uint8 reserve) required broadcast ram;\n  requestBattle(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) airecv clsend;\n  setAlert(uint32 avId) airecv clsend;\n  setConfrontToon(uint32 avId) broadcast;\n  setStrayed() airecv clsend;\n  setReturn() broadcast;\n};\n\ndclass DistributedMintSuit : DistributedFactorySuit {\n};\n\ndclass DistributedStageSuit : DistributedFactorySuit {\n};\n\ndclass DistributedInvasionSuit : DistributedSuitBase {\n  // This should be networked BEFORE the current state, so that the spawn point\n  // can be known and the position can be initialized.\n  setSpawnPoint(uint8 pointId) required broadcast ram;\n  // Ditto:\n  setAttackInfo(uint32 targetId, string prop, uint8 damage) required broadcast ram;\n\n  setState(string state, int32 timestamp) required broadcast ram;\n  setMarchLerp(int16/10 x1, int16/10 y1, int16/10 x2, int16/10 y2, int32 timestamp) broadcast ram;\n\n  setStaticPoint(int16/10 x, int16/10 y, uint16%360/100 h) broadcast ram;\n\n  sayFaceoffTaunt(bool custom, string phrase) broadcast;\n  makeSkelecog() broadcast ram;\n\n  takeShakerDamage(uint8 damage) clsend airecv;\n  setInvasionFinale(bool finale) required broadcast ram;\n};\n\ndclass DistributedBossCog : DistributedNode {\n  setDNAString(blob) required broadcast db;\n  setToonIds(uint32[], uint32[], uint32[]) broadcast ram;\n  setBattleIds(uint8, uint32, uint32) broadcast ram;\n  setArenaSide(uint8) broadcast ram;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  avatarNearEnter() airecv clsend;\n  avatarNearExit() airecv clsend;\n  toonDied(uint32) broadcast;\n  setBattleExperience(int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], uint8[], int16[], uint32[]) required broadcast ram;\n  zapToon(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, int8/100, int8/100, uint8, int16) airecv clsend;\n  showZapToon(uint32, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, uint8, int16) broadcast;\n  setAttackCode(uint8, uint32) broadcast;\n};\n\ndclass DistributedSellbotBoss : DistributedBossCog {\n  setCagedToonNpcId(uint32 npcId) required broadcast ram;\n  setDooberIds(uint32 dooberIds[]) broadcast ram;\n  setBossDamage(uint16 bossDamage, uint8 recoverRate, int16 timestamp) broadcast ram;\n  setState(string state) broadcast ram;\n  hitBoss(uint8 bossDamage) airecv clsend;\n  hitBossInsides() airecv clsend;\n  hitToon(uint32 toonId) airecv clsend;\n  finalPieSplat() airecv clsend;\n  touchCage() airecv clsend;\n  doStrafe(uint8 side, uint8 direction) broadcast;\n  cagedToonBattleThree(uint16 index, uint32 avId) broadcast;\n  toonPromoted(uint8(0-1) promoted);\n};\n\ndclass DistributedCashbotBoss : DistributedBossCog {\n  setState(string state) broadcast ram;\n  setBossDamage(uint16 bossDamage) broadcast ram;\n  setRewardId(uint16 rewardId) broadcast ram;\n  applyReward() airecv clsend;\n};\n\nstruct LinkPosition {\n  int16/100 x;\n  int16/100 y;\n  int16/100 z;\n};\n\ndclass DistributedCashbotBossCrane : DistributedObject {\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setIndex(uint8 index) required broadcast ram;\n  setState(char state, uint32 avId) broadcast ram;\n  requestControl() airecv clsend;\n  requestFree() airecv clsend;\n  clearSmoothing(int8 bogus) broadcast clsend;\n  setCablePos(uint8 changeSeq, int16/100 y, uint16%360/100 h, LinkPosition links[3], int16 timestamp) broadcast clsend;\n};\n\ndclass DistributedCashbotBossObject : DistributedObject {\n  setBossCogId(uint32) required broadcast ram;\n  setObjectState(char, uint32, uint32) broadcast ram;\n  requestGrab() airecv clsend;\n  rejectGrab();\n  requestDrop() airecv clsend;\n  hitFloor() clsend;\n  requestFree(int16/10, int16/10, int16/10, uint16%360/100) airecv clsend;\n  hitBoss(uint16/255) airecv clsend;\n  setX(int16/10) broadcast ram clsend airecv;\n  setY(int16/10) broadcast ram clsend airecv;\n  setZ(int16/10) broadcast ram clsend airecv;\n  setH(int16%360/10) broadcast ram clsend airecv;\n  setP(int16%360/10) broadcast ram clsend airecv;\n  setR(int16%360/10) broadcast ram clsend airecv;\n  setPos : setX, setY, setZ;\n  setHpr : setH, setP, setR;\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\n  setXY : setX, setY;\n  setXZ : setX, setZ;\n  setXYH : setX, setY, setH;\n  setXYZH : setX, setY, setZ, setH;\n  setComponentL(uint64) broadcast ram clsend airecv;\n  setComponentX(int16/10) broadcast ram clsend airecv;\n  setComponentY(int16/10) broadcast ram clsend airecv;\n  setComponentZ(int16/10) broadcast ram clsend airecv;\n  setComponentH(int16%360/10) broadcast ram clsend airecv;\n  setComponentP(int16%360/10) broadcast ram clsend airecv;\n  setComponentR(int16%360/10) broadcast ram clsend airecv;\n  setComponentT(int16) broadcast ram clsend airecv;\n  setSmStop : setComponentT;\n  setSmH : setComponentH, setComponentT;\n  setSmZ : setComponentZ, setComponentT;\n  setSmXY : setComponentX, setComponentY, setComponentT;\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  clearSmoothing(int8) broadcast clsend;\n};\n\ndclass DistributedCashbotBossSafe : DistributedCashbotBossObject {\n  setIndex(uint8 index) required broadcast ram;\n  requestInitial() airecv clsend;\n};\n\ndclass DistributedCashbotBossGoon : DistributedCashbotBossObject {\n  requestBattle(int16/10 pauseTime) airecv clsend;\n  requestStunned(int16/10 pauseTime) airecv clsend;\n  setVelocity(uint8/10 velocity) broadcast ram;\n  setHFov(uint8 hFov) broadcast ram;\n  setAttackRadius(uint8 attackRadius) broadcast ram;\n  setStrength(uint8 strength) broadcast ram;\n  setGoonScale(uint8/50 scale) broadcast ram;\n  setupGoon : setVelocity, setHFov, setAttackRadius, setStrength, setGoonScale;\n  setTarget(int16/10 x, int16/10 y, uint16%360/100 h, int16 arrivalTime) broadcast ram;\n  destroyGoon() broadcast clsend airecv;\n};\n\ndclass DistributedBattleBase : DistributedObject {\n  setLevelDoId(uint32 levelDoId) required broadcast ram;\n  setBattleCellId(uint32 battleCellId) required broadcast ram;\n  setInteractivePropTrackBonus(int8 trackBonus) required broadcast ram;\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\n  setZoneId(uint32 zoneId) required broadcast ram;\n  setInitialSuitPos(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\n  setMembers(uint32 suits[], string suitsJoining, string suitsPending, string suitsActive, string suitsLured, string suitTraps, uint32 toons[], string toonsJoining, string toonsPending, string toonsActive, string toonsRunning, int16 timestamp) required broadcast ram;\n  adjust(int16 timestamp) broadcast;\n  setMovie(int8 active, uint32 toons[], uint32 suits[], int8 id0, int8 tr0, int8 le0, int32 tg0, int16 hp0[], int16 ac0, int16 hpb0, int16 kbb0[], int8 died0, int8 revive0, int8 id1, int8 tr1, int8 le1, int32 tg1, int16 hp1[], int16 ac1, int16 hpb1, int16 kbb1[], int8 died1, int8 revive1, int8 id2, int8 tr2, int8 le2, int32 tg2, int16 hp2[], int16 ac2, int16 hpb2, int16 kbb2[], int8 died2, int8 revive2, int8 id3, int8 tr3, int8 le3, int32 tg3, int16 hp3[], int16 ac3, int16 hpb3, int16 kbb3[], int8 died3, int8 revive3, int8 sid0, int8 at0, int8 stg0, int16 dm0[], int8 sd0, int8 sb0, int8 st0, int8 sid1, int8 at1, int8 stg1, int16 dm1[], int8 sd1, int8 sb1, int8 st1, int8 sid2, int8 at2, int8 stg2, int16 dm2[], int8 sd2, int8 sb2, int8 st2, int8 sid3, int8 at3, int8 stg3, int16 dm3[], int8 sd3, int8 sb3, int8 st3) required broadcast ram;\n  setChosenToonAttacks(uint32 ids[], int16 tracks[], int16 levels[], int32 targets[]) broadcast ram;\n  setBattleExperience(int32 id0, int16 origExp0[], int16 earnedExp0[], uint32 origQuests0[], int16 items0[], int16 missedItems0[], int16 origMerits0[], int16 merits0[], uint32 parts0[], int32 id1, int16 origExp1[], int16 earnedExp1[], uint32 origQuests1[], int16 items1[], int16 missedItems1[], int16 origMerits1[], int16 merits1[], uint32 parts1[], int32 id2, int16 origExp2[], int16 earnedExp2[], uint32 origQuests2[], int16 items2[], int16 missedItems2[], int16 origMerits2[], int16 merits2[], uint32 parts2[], int32 id3, int16 origExp3[], int16 earnedExp3[], uint32 origQuests3[], int16 items3[], int16 missedItems3[], int16 origMerits3[], int16 merits3[], uint32 parts3[], uint8 deathList[], int16 uberList[], uint32 helpfulToonsList[]) required broadcast ram;\n  denyLocalToonJoin();\n  setBossBattle(uint8 value) required broadcast ram;\n  setState(string state, int16 timestamp) required broadcast ram;\n  faceOffDone() airecv clsend;\n  toonRequestJoin(int16/10 x, int16/10 y, int16/10 z) airecv clsend;\n  toonRequestRun() airecv clsend;\n  toonDied() airecv clsend;\n  adjustDone() airecv clsend;\n  timeout() airecv clsend;\n  movieDone() airecv clsend;\n  rewardDone() airecv clsend;\n  joinDone(uint32 avId) airecv clsend;\n  requestAttack(int8 track, int8 level, int32 av) airecv clsend;\n  requestPetProxy(uint32 av) airecv clsend;\n};\n\ndclass DistributedBattle : DistributedBattleBase {\n};\n\ndclass DistributedBattleBldg : DistributedBattleBase {\n};\n\ndclass DistributedBattleTutorial : DistributedBattle {\n};\n\ndclass DistributedLevelBattle : DistributedBattle {\n};\n\ndclass DistributedBattleFactory : DistributedLevelBattle {\n};\n\ndclass DistributedMintBattle : DistributedLevelBattle {\n};\n\ndclass DistributedStageBattle : DistributedLevelBattle {\n};\n\ndclass DistributedBattleFinal : DistributedBattleBase {\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setBattleNumber(uint8 battleNumber) required broadcast ram;\n  setBattleSide(uint8 battleSide) required broadcast ram;\n};\n\ndclass DistributedBoat : DistributedObject {\n  setState(string state, int16 timestamp) required broadcast ram;\n};\n\ndclass DistributedButterfly : DistributedObject {\n  setArea(int16 playground, int16 area) required broadcast ram;\n  setState(int8 stateIndex, uint8 curIndex, uint8 destIndex, uint16/10 time, int16 timestamp) required broadcast ram;\n  avatarEnter() airecv clsend;\n};\n\ndclass DistributedMMPiano : DistributedObject {\n  requestSpeedUp() airecv clsend;\n  requestChangeDirection() airecv clsend;\n  setSpeed(int16/1000 rpm, uint16/100 offset, int16 timestamp) broadcast ram;\n  playSpeedUp(uint32 avId) broadcast;\n  playChangeDirection(uint32 avId) broadcast;\n};\n\ndclass DistributedDGFlower : DistributedObject {\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  setHeight(uint8/10 newHeight) broadcast ram;\n};\n\ndclass DistributedElectionEvent : DistributedObject {\n  setState(string, int32) required broadcast ram;\n  wheelbarrowAvatarEnter() clsend airecv;\n  slappyAvatarEnter() clsend airecv;\n  requestSuit() clsend airecv;\n  setSuitPhrase(string) clsend airecv;\n  setSuitState(string) clsend airecv;\n  setSuitDamage(uint8, bool) clsend airecv;\n  phraseSaidToFlippy(uint16) clsend airecv;\n  saySurleePhrase(string, bool, bool) broadcast;\n  flippySpeech(uint32, uint16) broadcast;\n};\n\ndclass DistributedFlippyStand : DistributedObject {\n  wheelbarrowAvatarEnter() clsend airecv;\n};\n\ndclass DistributedToonfestTower : DistributedObject {\n  updateTower(string, uint8) broadcast;\n};\n\ndclass DistributedToonfestCog : DistributedObject {\n  updateTower() clsend airecv;\n  setPosThroughAI(int16, int16, int16) broadcast;\n  setIdThroughAI(int16) broadcast;\n};\n\ndclass DistributedToonfestTowerBase : DistributedObject {\n  requestSpeedUp() airecv clsend;\n  requestChangeDirection() airecv clsend;\n  setSpeed(int16/1000, uint16/100, int16) broadcast ram;\n  playSpeedUp(uint32) broadcast;\n  playChangeDirection(uint32) broadcast;\n};\n\ndclass DistributedToonfestActivity : DistributedObject {\n  toonJoinRequest() airecv clsend;\n  toonExitRequest() airecv clsend;\n  toonExitDemand() airecv clsend;\n  toonReady() airecv clsend;\n  joinRequestDenied(uint8 reason);\n  exitRequestDenied(uint8 reason);\n  setToonsPlaying(uint32 toonIds[]) broadcast ram;\n  setState(string newState, int16 timestamp) broadcast ram;\n  showJellybeanReward(uint32 earnedAmount, uint8 jarAmount, string message);\n};\n\ndclass DistributedToonfestTrampolineActivity : DistributedToonfestActivity {\n  awardBeans(uint8 numBeans, uint16 height) clsend airecv;\n  setBestHeightInfo(string toonName, uint16 height) broadcast ram;\n  reportHeightInformation(uint16 height) airecv clsend;\n  leaveTrampoline() broadcast;\n  requestAnim(char request[0-256]) clsend airecv;\n  requestAnimEcho(string request) broadcast;\n  removeBeans(int8 beansToRemove[]) clsend airecv;\n  removeBeansEcho(int8 beansToRemove[]) broadcast;\n};\n\ndclass DistributedToonfestVictoryTrampolineActivity : DistributedToonfestTrampolineActivity {\n};\n\ndclass DistributedToonfestCannonActivity : DistributedToonfestActivity {\n  setMovie(uint8 mode, uint32 toonId) broadcast;\n  setLanded(uint32 toonId) airecv broadcast clsend;\n  setCannonWillFire(uint32 cannonId, int32/100 zRot, uint32/100 angle) broadcast;\n  cloudsColorRequest() clsend airecv;\n  cloudsColorResponse(partyCloudColor cloudColorList[]);\n  requestCloudHit(uint16 cloudId, uint8/100 r, uint8/100 g, uint8/100 b) clsend airecv;\n  setCloudHit(uint16 cloudNumber, uint8/100 r, uint8/100 g, uint8/100 b) broadcast;\n  setToonTrajectoryAi(int32 launchTime, int32/100 x, int32/100 y, int32/100 z, int32/100 h, int32/100 p, int32/100 r, int32/100 vx, int32/100 vy, int32/100 vz) airecv clsend;\n  setToonTrajectory(uint32 avId, int32 launchTime, int32/100 x, int32/100 y, int32/100 z, int32/100 h, int32/100 p, int32/100 r, int32/100 vx, int32/100 vy, int32/100 vz) broadcast;\n  updateToonTrajectoryStartVelAi(int32/100 vx, int32/100 vy, int32/100 vz) airecv clsend;\n  updateToonTrajectoryStartVel(uint32 avId, int32/100 vx, int32/100 vy, int32/100 vz) broadcast;\n};\n\ndclass DistributedToonfestCannon : DistributedObject {\n  setActivityDoId(uint64 doId) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  requestEnter() airecv clsend;\n  requestExit() broadcast;\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\n  setCannonPosition(int32/100 rot, uint32/100 angle) airecv clsend;\n  setCannonLit(int32/100 rot, uint32/100 angle) airecv clsend;\n  setFired() airecv clsend;\n  setLanded(uint32 avId) airecv clsend;\n  updateCannonPosition(uint32 avId, int32/100 zRot, uint32/100 angle) broadcast ram;\n  setCannonExit(uint32) broadcast;\n  setTimeout() clsend airecv;\n};\n\ndclass DistributedElectionCamera : DistributedNode {\n  setState(string, int32, int16/10, int16/10, int16/10, int16%360/10, int16%360/10, uint32) required broadcast ram;\n};\n\ndclass DistributedElectionCameraManager : DistributedObject {\n  setMainCamera(uint32) required broadcast ram;\n  setCameraIds(uint32 []) required broadcast ram;\n};\n\ndclass DistributedHotAirBalloon : DistributedObject {\n  setState(string, int32, uint32) required broadcast ram;\n  requestEnter() clsend airecv;\n  setFlightPath(uint8) required broadcast ram;\n};\n\ndclass DistributedToonfestBalloon : DistributedObject {\n  setState(string, int32, uint32) required broadcast ram;\n  requestEnter() clsend airecv;\n  setFlightPath(uint8) required broadcast ram;\n};\n\ndclass DistributedSafezoneInvasion : DistributedObject {\n  pieHitToon(uint32) clsend airecv;\n  pieHitSuit(uint32) clsend airecv;\n  takeDamage(uint8) clsend airecv;\n  setInvasionStarted(bool) required broadcast ram;\n  stopMusic() broadcast ram;\n};\n\ndclass DistributedFishingPond : DistributedObject {\n  hitTarget(uint32 target) airecv clsend;\n  setArea(uint32 area) required broadcast ram;\n};\n\ndclass DistributedFishingTarget : DistributedNode {\n  setPondDoId(uint32 pondDoId) required broadcast ram;\n  setState(uint8 stateIndex, int16/10 angle, uint16/100 radius, uint16/10 time, int16 timeStamp) required broadcast ram;\n};\n\ndclass DistributedFishingSpot : DistributedObject {\n  setPondDoId(uint32 pondDoId) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  requestEnter() airecv clsend;\n  rejectEnter();\n  requestExit() airecv clsend;\n  setOccupied(uint32 avId) broadcast ram;\n  doCast(uint8/255 p, int16/100 h) airecv clsend;\n  sellFish() airecv clsend;\n  sellFishComplete(uint8 trophyResult, uint16 numFishCaught);\n  setMovie(uint8 mode, uint8 code, uint16 itemDesc1, uint16 itemDesc2, uint16 itemDesc3, uint8/100 power, int16/100 h) broadcast ram;\n};\n\ndclass DistributedPondBingoManager : DistributedObject {\n  setPondDoId(uint32 pondId) required broadcast ram;\n  updateGameState(uint32 gameState, uint8 cellId);\n  setCardState(uint16 cardId, uint8 typeId, uint16 tileSeed, uint32 gameState);\n  setState(string state, int16 timeStamp);\n  cardUpdate(uint16 cardId, uint8 cellId, uint8 genus, uint8 species) airecv clsend;\n  enableBingo();\n  handleBingoCall(uint16 cardId) airecv clsend;\n  setJackpot(uint16 jackpot);\n};\n\ndclass DistributedCannon : DistributedObject {\n  setEstateId(uint32 estateId) required broadcast ram;\n  setTargetId(uint32 targetId) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  setActive(uint8 active) airecv clsend;\n  setActiveState(uint8 active) broadcast ram;\n  requestEnter() airecv clsend;\n  requestExit() broadcast;\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\n  setCannonPosition(int32/100 rotation, uint32/100 angle) airecv clsend;\n  setCannonLit(int32/100 rotation, uint32/100 angle) airecv clsend;\n  setFired() airecv clsend;\n  setLanded() airecv clsend;\n  updateCannonPosition(uint32 avId, int32/100 zRot, uint32/100 angle) broadcast ram;\n  setCannonWillFire(uint32 avId, int32/100 fireTime, int32/100 zRot, uint32/100 angle, int16 timestamp) broadcast;\n  setCannonExit(uint32 avId) broadcast;\n  requestBumperMove(int32/100 x, int32/100 y, int32/100 z) airecv clsend;\n  setCannonBumperPos(int32/100 x, int32/100 y, int32/100 z) required broadcast ram;\n};\n\ndclass DistributedTarget : DistributedObject {\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\n  setState(uint8 enabled, uint32/10 score, uint8 time) broadcast;\n  setReward(uint32 reward) broadcast;\n  setResult(uint32 avId) airecv clsend;\n  setBonus(int16/10 bonus) airecv clsend;\n  setCurPinballScore(uint32 avId, int32 score, int32 multiplier) clsend airecv;\n  setPinballHiScorer(string name) broadcast ram;\n  setPinballHiScore(int32 score) broadcast ram;\n};\n\ndclass DistributedMinigame : DistributedObject {\n  setParticipants(uint32 avIds[]) broadcast ram required;\n  setTrolleyZone(uint32 trolleyZone) broadcast ram required;\n  setStartingVotes(uint16 startingVotesArray[]) broadcast ram required;\n  setMetagameRound(int8 metagameRound) broadcast ram required;\n  setDifficultyOverrides(int32 difficultyOverride, int32 trolleyZoneOverride) broadcast ram required;\n  setAvatarJoined() airecv clsend;\n  setAvatarReady() airecv clsend;\n  setAvatarExited() airecv clsend;\n  requestExit() airecv clsend;\n  setGameReady() broadcast;\n  setGameStart(int16 timestamp) broadcast;\n  setGameExit() broadcast;\n  setGameAbort() broadcast;\n};\n\ndclass DistributedMinigameTemplate : DistributedMinigame {\n};\n\ndclass DistributedRaceGame : DistributedMinigame {\n  setTimerStartTime(int16 timestamp) broadcast;\n  setAvatarChoice(uint8 choice) airecv clsend;\n  setAvatarChose(uint32 avId) broadcast;\n  setChancePositions(uint8 positions[]) broadcast;\n  setServerChoices(int8 choices[], uint8 positions[], int8 rewards[]) broadcast;\n};\n\ndclass DistributedCannonGame : DistributedMinigame {\n  setCannonPosition(int32/100 zRot, uint32/100 angle) airecv clsend;\n  setCannonLit(int32/100 zRot, uint32/100 angle) airecv clsend;\n  updateCannonPosition(uint32 avId, int32/100 zRot, uint32/100 angle) broadcast;\n  setCannonWillFire(uint32 avId, int32/100 fireTime, int32/100 zRot, uint32/100 angle) broadcast;\n  setToonWillLandInWater(int32/100 landTime) airecv clsend;\n  announceToonWillLandInWater(uint32 avId, int32/100 landTime) broadcast;\n};\n\ndclass DistributedPhotoGame : DistributedMinigame {\n  newClientPhotoScore(uint8 subjectIndex, char pose[0-256], uint32/100 score) airecv clsend;\n  newAIPhotoScore(uint32 playerId, uint8 assignmentIndex, uint32/100 score) broadcast;\n  filmOut() airecv clsend;\n};\n\ndclass DistributedPatternGame : DistributedMinigame {\n  reportPlayerReady() airecv clsend;\n  setPattern(uint8 pattern[]) broadcast;\n  reportPlayerPattern(uint8 pattern[], uint16/1000 totalTime) airecv clsend;\n  setPlayerPatterns(uint8 pattern1[], uint8 pattern2[], uint8 pattern3[], uint8 pattern4[], uint32 fastestAvId) broadcast;\n  reportButtonPress(uint8 index, uint8 wrong) airecv clsend;\n  remoteButtonPressed(uint32 avId, uint8 index, uint8 wrong) broadcast;\n};\n\ndclass DistributedRingGame : DistributedMinigame {\n  setTimeBase(int16 timestamp) broadcast ram required;\n  setColorIndices(int8 a, int8 b, int8 c, int8 d) broadcast ram required;\n  setToonGotRing(uint8 success) airecv clsend;\n  setRingGroupResults(uint8 bitfield) broadcast;\n};\n\ndclass DistributedTagGame : DistributedMinigame {\n  tag(uint32 taggedAvId) airecv clsend;\n  setIt(uint32 avId) broadcast;\n  setTreasureScore(uint16 scores[]) broadcast;\n};\n\ndclass DistributedMazeGame : DistributedMinigame {\n  claimTreasure(uint32 treasureNum) airecv clsend;\n  setTreasureGrabbed(uint32 avId, uint32 treasureNum) broadcast;\n  allTreasuresTaken() broadcast;\n  hitBySuit(uint32 avId, int16 timestamp) clsend broadcast;\n};\n\ndclass DistributedTugOfWarGame : DistributedMinigame {\n  reportPlayerReady(uint8 side) airecv clsend;\n  sendGoSignal(uint8 index[]) broadcast;\n  sendStopSignal(uint32 winners[], uint32 losers[], uint32 tieers[]) broadcast;\n  sendGameType(uint8 index, uint8 suit) broadcast;\n  reportEndOfContest(uint8 index) airecv clsend;\n  sendNewAvIdList(uint32 newAvIdList[]) airecv clsend;\n  reportCurrentKeyRate(uint32 keyRate, int16/100 force) airecv clsend;\n  sendCurrentPosition(uint32 avIdList[], int16/1000 offsetList[]) broadcast;\n  sendSuitPosition(int32/1000 suitOffset) broadcast;\n  remoteKeyRateUpdate(uint32 avId, uint32 keyRate) broadcast;\n};\n\ndclass DistributedCatchGame : DistributedMinigame {\n  claimCatch(uint32 objNum, uint32 DropObjTypeId) airecv clsend;\n  setObjectCaught(uint32 avId, uint32 objNum) broadcast;\n  hitBySuit(uint32 avId, int16 timestamp) clsend broadcast;\n  reportDone() airecv clsend;\n  setEveryoneDone() broadcast;\n};\n\ndclass DistributedDivingGame : DistributedMinigame {\n  pickupTreasure(uint32 chestId) airecv clsend;\n  setTreasureGrabbed(uint32 avId, uint32 chestId) broadcast;\n  handleFishCollision(uint32 spawnId, uint32 spawnerId, char status[0-256]) airecv clsend;\n  performFishCollision(uint32 avId, uint32 spawnId, uint32 spawnerId, int16 timestamp) broadcast;\n  handleCrabCollision(char status[0-256]) airecv clsend;\n  performCrabCollision(uint32 avId, int16 timestamp) broadcast;\n  setTreasureDropped(uint32 avId, int16 timestamp) broadcast;\n  fishSpawn(int16 timestamp, uint32 fishcode, uint32 spawnerId, uint16 offset) broadcast;\n  removeFish(uint32) airecv clsend;\n  getCrabMoving(uint32 crabId, int16 crabX, int8 dir) airecv clsend;\n  setCrabMoving(uint32 crabId, int16 timestamp, int8 rand1, int8 rand2, int16 crabX, int8 dir) broadcast;\n  treasureRecovered() airecv clsend;\n  dropTreasure() airecv clsend;\n  incrementScore(uint32 avId, uint32 newSpot, int16 timestamp) broadcast;\n};\n\ndclass DistributedTargetGame : DistributedMinigame {\n  setTimeBase(int16 timestamp) broadcast ram required;\n  setToonGotRing(uint8) airecv clsend;\n  setRingGroupResults(uint8) broadcast;\n  setPlayerDone() airecv clsend;\n  setScore(int32 scoreX, int32 scoreY) airecv clsend;\n  setTargetSeed(uint32 targetSeed) broadcast ram;\n  setRoundDone() broadcast;\n  setSingleScore(uint16 score, uint32 avId) broadcast;\n  setGameDone() broadcast;\n};\n\ndclass EstateManager : DistributedObject {\n  startAprilFools() broadcast;\n  stopAprilFools() broadcast;\n  getEstateZone(uint32 avId) airecv clsend;\n  setEstateZone(uint32 ownerId, uint32 zoneId);\n  setAvHouseId(uint32 avId, uint32 houseIds[]) broadcast;\n  sendAvToPlayground(DoId avId, uint8 reason);\n  exitEstate() airecv clsend;\n  removeFriend(uint32 ownerId, uint32 avId) airecv clsend;\n};\n\nstruct decorItem {\n  uint8 decorType;\n  uint8 dataByte[];\n  uint32 dataWord[];\n};\n\nstruct lawnItem {\n  uint8 type;\n  uint8 hardPoint;\n  int8 waterLevel;\n  int8 growthLevel;\n  uint16 optional;\n};\n\ndclass DistributedEstate : DistributedObject {\n  setEstateReady() broadcast;\n  setClientReady() airecv clsend;\n  setEstateType(uint8 type = 0) required broadcast db;\n  setClosestHouse(uint8 house) airecv clsend;\n  setTreasureIds(uint32 doIds[]) broadcast ram;\n  requestServerTime() airecv clsend;\n  setServerTime(uint32 ts);\n  setDawnTime(uint32 ts) required broadcast ram;\n  placeOnGround(uint32 UNKNOWN) broadcast ram;\n  setDecorData(lawnItem items[] = []) required airecv db;\n  setLastEpochTimeStamp(uint32 timestamp = 0) required airecv db;\n  setRentalTimeStamp(uint32 timestamp = 0) required airecv db;\n  setRentalType(uint8 type = 0) required airecv db;\n  setSlot0ToonId(uint32 toonId = 0) required airecv db;\n  setSlot0Items(lawnItem items[] = []) required airecv db;\n  setSlot1ToonId(uint32 toonId = 0) required airecv db;\n  setSlot1Items(lawnItem items[] = []) required airecv db;\n  setSlot2ToonId(uint32 toonId = 0) required airecv db;\n  setSlot2Items(lawnItem items[] = []) required airecv db;\n  setSlot3ToonId(uint32 toonId = 0) required airecv db;\n  setSlot3Items(lawnItem items[] = []) required airecv db;\n  setSlot4ToonId(uint32 toonId = 0) required airecv db;\n  setSlot4Items(lawnItem items[] = []) required airecv db;\n  setSlot5ToonId(uint32 toonId = 0) required airecv db;\n  setSlot5Items(lawnItem items[] = []) required airecv db;\n  setIdList(uint32 idList[]) broadcast ram;\n  completeFlowerSale(uint8 sell) airecv clsend;\n  awardedTrophy(uint32 avId) broadcast;\n  setClouds(uint8 clouds) required broadcast ram;\n  cannonsOver() broadcast;\n  gameTableOver() broadcast;\n};\n\ndclass DistributedHouse : DistributedObject {\n  string DcObjectType db;\n  setHousePos(uint8 index) required broadcast;\n  setHouseType(uint8 type = 0) required broadcast db;\n  setGardenPos(uint8 index = 0) required broadcast db;\n  setAvatarId(uint32 toonId = 0) required broadcast db;\n  setName(string toonName = "") required broadcast db;\n  setColor(uint8 colorIndex = 0) required broadcast db;\n  setGender(uint8 genderIndex = 1) required;\n  setAtticItems(blob atticItems = "") required db;\n  setInteriorItems(blob interiorItems = "") required db;\n  setAtticWallpaper(blob atticWallpaper = "") required db;\n  setInteriorWallpaper(blob interiorWallpaper = "") required db;\n  setAtticWindows(blob atticWindows = "") required db;\n  setInteriorWindows(blob interiorWindows = "") required db;\n  setDeletedItems(blob deletedItems = "") required db;\n  setInteriorInitialized(uint8 initialized = 0) required db;\n  setCannonEnabled(uint8 enabled) required;\n  setHouseReady() broadcast ram;\n};\n\ndclass DistributedHouseInterior : DistributedObject {\n  setHouseId(uint32 index) required broadcast ram;\n  setHouseIndex(uint8 index) required broadcast ram;\n  setWallpaper(blob items) required broadcast ram;\n  setWindows(blob items) required broadcast ram;\n};\n\ndclass DistributedGarden : DistributedObject {\n  sendNewProp(uint8 prop, int16/10 x, int16/10 y, int16/10 z) broadcast;\n};\n\ndclass DistributedParty : DistributedObject {\n  setPartyClockInfo(uint8 x, uint8 y, uint8 h) required broadcast;\n  setInviteeIds(uint32 inviteeIds[]) required broadcast;\n  setPartyState(bool partyState) required broadcast;\n  setPartyInfoTuple(party partyInfoTuple) required broadcast;\n  setAvIdsAtParty(uint32 avIdsAtParty[]) required broadcast;\n  setPartyStartedTime(string startedTime) required broadcast;\n  setHostName(string hostName) required broadcast;\n  enteredParty() clsend airecv;\n};\n\ndclass DistributedPartyActivity : DistributedObject {\n  setX(int16/10 x) broadcast required;\n  setY(int16/10 y) broadcast required;\n  setH(uint16%360/100 h) broadcast required;\n  setPartyDoId(uint32 partyDoId) broadcast required;\n  toonJoinRequest() airecv clsend;\n  toonExitRequest() airecv clsend;\n  toonExitDemand() airecv clsend;\n  toonReady() airecv clsend;\n  joinRequestDenied(uint8 reason);\n  exitRequestDenied(uint8 reason);\n  setToonsPlaying(uint32 toonIds[]) broadcast ram;\n  setState(string newState, int16 timestamp) broadcast ram;\n  showJellybeanReward(uint32 earnedAmount, uint8 jarAmount, string message);\n};\n\ndclass DistributedPartyTeamActivity : DistributedPartyActivity {\n  toonJoinRequest(uint8(0-1) todo0) airecv clsend;\n  toonExitRequest(uint8(0-1) todo0) airecv clsend;\n  toonSwitchTeamRequest() airecv clsend;\n  setPlayersPerTeam(uint8 min, uint8 max) broadcast required;\n  setDuration(uint8 duration) broadcast required;\n  setCanSwitchTeams(bool canSwitchTeams) broadcast required;\n  setState(string newState, int16 timestamp, uint32 data) broadcast ram;\n  setToonsPlaying(uint32 leftTeamToonIds[0-8], uint32 rightTeamToonIds[0-8]) required broadcast ram;\n  setAdvantage(uint16/100 advantage);\n  switchTeamRequestDenied(uint8 reason);\n};\n\nstruct CatchGeneration {\n  uint32 generation;\n  uint32 timestamp;\n  int8 numPlayers;\n};\n\ndclass DistributedPartyCatchActivity : DistributedPartyActivity {\n  setStartTimestamp(uint32 timestamp32) required broadcast ram;\n  setGenerations(CatchGeneration generations[]) required broadcast ram;\n  requestActivityStart() airecv clsend;\n  startRequestResponse(uint8 UNKNOWN);\n  claimCatch(uint32 generation, uint32 objNum, uint32 objType) airecv clsend;\n  setObjectCaught(uint32 avId, uint32 generation, uint32 objNum) broadcast;\n};\n\ndclass DistributedPartyWinterCatchActivity : DistributedPartyCatchActivity {\n};\n\ndclass DistributedPartyCogActivity : DistributedPartyTeamActivity {\n  pieThrow(uint32 toonId, int32 timestamp, int32/100 h, int32/100 x, int32/100 y, int32/100 z, uint8 power) clsend broadcast;\n  pieHitsToon(uint32 toonId, int32 timestamp, int32/100 x, int32/100 y, int32/100 z) clsend broadcast;\n  pieHitsCog(uint32 toonId, int32 timestamp, int8(0-2) hitCogNum, int32/100 x, int32/100 y, int32/100 z, int32 direction, bool part) clsend broadcast airecv;\n  setCogDistances(int8/100 distances[3]) broadcast ram;\n  setHighScore(string toonName, uint16 score) broadcast ram;\n};\n\ndclass DistributedPartyWinterCogActivity : DistributedPartyCogActivity {\n};\n\ndclass DistributedPartyDanceActivityBase : DistributedPartyActivity {\n  updateDancingToon(uint8 state, char anim[0-256]) clsend airecv;\n  setToonsPlaying(uint32 toonIds[], uint16%360/100 toonHeadings[]) broadcast ram;\n  setDancingToonState(uint32 toonId, uint8 state, string anim) broadcast;\n};\n\ndclass DistributedPartyDanceActivity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyDance20Activity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyValentineDanceActivity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyValentineDance20Activity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyJukeboxActivityBase : DistributedPartyActivity {\n  setNextSong(jukeboxSongInfo song) clsend airecv;\n  setSongPlaying(jukeboxSongInfo songInfo, uint32 toonId) broadcast ram;\n  queuedSongsRequest() clsend airecv;\n  queuedSongsResponse(jukeboxSongInfo songInfoList[], int16 index);\n  setSongInQueue(jukeboxSongInfo songInfo);\n  moveHostSongToTopRequest() clsend airecv;\n  moveHostSongToTop();\n};\n\ndclass DistributedPartyJukeboxActivity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyJukebox40Activity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyValentineJukeboxActivity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyValentineJukebox40Activity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyCannonActivity : DistributedPartyActivity {\n  setMovie(uint8 mode, uint32 toonId) broadcast;\n  setLanded(uint32 toonId) airecv broadcast clsend;\n  setCannonWillFire(uint32 cannonId, int32/100 zRot, uint32/100 angle) broadcast;\n  cloudsColorRequest() clsend airecv;\n  cloudsColorResponse(partyCloudColor cloudColorList[]);\n  requestCloudHit(uint16 cloudId, uint8/100 r, uint8/100 g, uint8/100 b) clsend airecv;\n  setCloudHit(uint16 cloudNumber, uint8/100 r, uint8/100 g, uint8/100 b) broadcast;\n  setToonTrajectoryAi(int32 launchTime, int32/100 x, int32/100 y, int32/100 z, int32/100 h, int32/100 p, int32/100 r, int32/100 vx, int32/100 vy, int32/100 vz) airecv clsend;\n  setToonTrajectory(uint32 avId, int32 launchTime, int32/100 x, int32/100 y, int32/100 z, int32/100 h, int32/100 p, int32/100 r, int32/100 vx, int32/100 vy, int32/100 vz) broadcast;\n  updateToonTrajectoryStartVelAi(int32/100 vx, int32/100 vy, int32/100 vz) airecv clsend;\n  updateToonTrajectoryStartVel(uint32 avId, int32/100 vx, int32/100 vy, int32/100 vz) broadcast;\n};\n\ndclass DistributedPartyCannon : DistributedObject {\n  setActivityDoId(uint64 doId) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  requestEnter() airecv clsend;\n  requestExit() broadcast;\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\n  setCannonPosition(int32/100 rot, uint32/100 angle) airecv clsend;\n  setCannonLit(int32/100 rot, uint32/100 angle) airecv clsend;\n  setFired() airecv clsend;\n  setLanded(uint32 avId) airecv clsend;\n  updateCannonPosition(uint32 avId, int32/100 zRot, uint32/100 angle) broadcast ram;\n  setCannonExit(uint32) broadcast;\n  setTimeout() clsend airecv;\n};\n\ndclass DistributedPartyFireworksActivity : DistributedPartyActivity {\n  setEventId(uint8 eventId) required broadcast;\n  setShowStyle(uint8 style) required broadcast;\n  setSongId(uint8 songId) required broadcast;\n};\n\ndclass DistributedPartyTrampolineActivity : DistributedPartyActivity {\n  awardBeans(uint8 numBeans, uint16 height) clsend airecv;\n  setBestHeightInfo(string toonName, uint16 height) broadcast ram;\n  reportHeightInformation(uint16 height) airecv clsend;\n  leaveTrampoline() broadcast;\n  requestAnim(char request[0-256]) clsend airecv;\n  requestAnimEcho(string request) broadcast;\n  removeBeans(int8 beansToRemove[]) clsend airecv;\n  removeBeansEcho(int8 beansToRemove[]) broadcast;\n};\n\ndclass DistributedPartyValentineTrampolineActivity : DistributedPartyTrampolineActivity {\n};\n\ndclass DistributedPartyVictoryTrampolineActivity : DistributedPartyTrampolineActivity {\n};\n\ndclass DistributedPartyWinterTrampolineActivity : DistributedPartyTrampolineActivity {\n};\n\ndclass DistributedPartyTugOfWarActivity : DistributedPartyTeamActivity {\n  reportKeyRateForce(uint32 todo0, int16/100 todo1) airecv clsend;\n  reportFallIn(uint8 todo0) airecv clsend;\n  setToonsPlaying(uint32 leftTeamToonIds[0-4], uint32 rightTeamToonIds[0-4]) required broadcast ram;\n  updateToonKeyRate(uint32 toonId, uint32 keyRate) broadcast;\n  updateToonPositions(int16/1000 offset) broadcast;\n};\n\ndclass DeleteManager : DistributedObject {\n  setInventory(blob newInventoryString) airecv clsend;\n};\n\nstruct weeklyCalendarHoliday {\n  uint8 holidayId;\n  uint8 dayOfTheWeek;\n};\n\nstruct yearlyCalendarHoliday {\n  uint8 holidayId;\n  uint8[] firstStartTime;\n  uint8[] lastEndTime;\n};\n\nstruct oncelyCalendarHoliday {\n  uint8 holidayId;\n  uint16[] firstStartTime;\n  uint16[] lastEndTime;\n};\n\nstruct relativelyCalendarHoliday {\n  uint8 holidayId;\n  uint16[] firstStartTime;\n  uint16[] lastEndTime;\n};\n\nstruct startAndEndTime {\n  uint16[] startTime;\n  uint16[] endTime;\n};\n\nstruct multipleStartHoliday {\n  uint8 holidayId;\n  startAndEndTime times[];\n};\n\ndclass NewsManager : DistributedObject {\n  setPopulation(uint32 population) broadcast ram;\n  setBingoWin(uint32 zoneId) broadcast ram;\n  setBingoStart() broadcast;\n  setBingoEnd() broadcast;\n  setCircuitRaceStart() broadcast;\n  setCircuitRaceEnd() broadcast;\n  setTrolleyHolidayStart() broadcast;\n  setTrolleyHolidayEnd() broadcast;\n  setTrolleyWeekendStart() broadcast;\n  setTrolleyWeekendEnd() broadcast;\n  setRoamingTrialerWeekendStart() broadcast;\n  setRoamingTrialerWeekendEnd() broadcast;\n  setInvasionStatus(uint8 msgType, string cogType, uint32 numRemaining, uint8 specialSuit) broadcast;\n  setHolidayIdList(uint32 holidayIdList[]) broadcast ram;\n  holidayNotify() broadcast;\n  setWeeklyCalendarHolidays(weeklyCalendarHoliday weeklyCalendarHolidays[]) required broadcast ram;\n  setYearlyCalendarHolidays(yearlyCalendarHoliday yearlyCalendarHolidays[]) required broadcast ram;\n  setOncelyCalendarHolidays(oncelyCalendarHoliday oncelyCalendarHolidays[]) required broadcast ram;\n  setRelativelyCalendarHolidays(relativelyCalendarHoliday relativelyCalendarHolidays[]) required broadcast ram;\n  setMultipleStartHolidays(multipleStartHoliday multipleStartHolidays[]) required broadcast ram;\n  sendSystemMessage(string message, uint8 style) broadcast ram;\n};\n\ndclass PurchaseManager : DistributedObject {\n  setPlayerIds(uint32 playerIds, uint32, uint32, uint32) required broadcast ram;\n  setNewbieIds(uint32 newbieIds[]) required broadcast ram;\n  setMinigamePoints(uint8 mpArray, uint8, uint8, uint8) required broadcast ram;\n  setPlayerMoney(uint8 moneyArray, uint8, uint8, uint8) required broadcast ram;\n  setPlayerStates(uint8 stateArray, uint8, uint8, uint8) required broadcast ram;\n  setCountdown(int16 timestamp) required broadcast ram;\n  setMetagameRound(int8 round) required broadcast ram;\n  setVotesArray(int16 votesArray[]) required broadcast ram;\n  requestExit() airecv clsend;\n  requestPlayAgain() airecv clsend;\n  setInventory(blob data, int16 newMoney, uint8 done) airecv clsend;\n  setPurchaseExit() broadcast;\n};\n\ndclass NewbiePurchaseManager : PurchaseManager {\n  setOwnedNewbieId(uint32 ownedNewbieId) required broadcast ram;\n};\n\ndclass TutorialManager : DistributedObject {\n  requestTutorial() airecv clsend;\n  rejectTutorial() airecv clsend;\n  requestSkipTutorial() airecv clsend;\n  skipTutorialResponse(uint8 allOk);\n  enterTutorial(uint32 branchZone, uint32 streetZone, uint32 shopZone, uint32 hqZone);\n  allDone() airecv clsend;\n  toonArrived() airecv clsend;\n};\n\ndclass CatalogManager : DistributedObject {\n  startCatalog() airecv clsend;\n};\n\ndclass DistributedMyTest : DistributedObject {\n  setMyTest(uint16) broadcast;\n};\n\ndclass DistributedTreasure : DistributedObject {\n  setTreasureType(uint16 treasureType) required broadcast ram;\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\n  requestGrab() airecv clsend;\n  setGrab(uint32 avId) broadcast ram;\n  setReject() broadcast;\n};\n\ndclass DistributedCashbotBossTreasure : DistributedTreasure {\n  setGoonId(uint32 todo0) required broadcast ram;\n  setFinalPosition(int16/10 todo0, int16/10 todo1, int16/10 todo2) required broadcast ram;\n  setStyle(uint16 todo0) required broadcast ram;\n};\n\ndclass DistributedLargeBlobSender : DistributedObject {\n  setMode(uint8) required broadcast ram;\n  setTargetAvId(uint32) required broadcast ram;\n  setChunk(blob);\n  setFilename(string);\n  setAck() airecv clsend;\n};\n\ndclass DistributedLevel : DistributedObject {\n  setLevelZoneId(uint32 zoneId) required broadcast ram;\n  setPlayerIds(uint32 avIdList[]) required broadcast ram;\n  setEntranceId(uint8 entranceId) required broadcast ram;\n  setZoneIds(uint32 zoneIds[]) broadcast ram;\n  setStartTimestamp(int32 timestamp) broadcast ram;\n  setOuch(uint8 penalty) airecv clsend;\n  requestCurrentLevelSpec(string specHash, string entTypeRegHash) airecv clsend;\n  setSpecDeny(blob);\n  setSpecSenderDoId(uint32);\n  setAttribChange(uint32, blob, blob, blob) broadcast;\n};\n\ndclass DistributedEntity : DistributedObject {\n  setLevelDoId(uint32 levelDoId) required broadcast ram;\n  setEntId(uint32 entId) required broadcast ram;\n};\n\ndclass DistributedInteractiveEntity : DistributedEntity {\n  setAvatarInteract(uint32 avatarId) required broadcast ram;\n  requestInteract() airecv clsend;\n  rejectInteract();\n  requestExit() airecv clsend;\n  avatarExit(uint32 avatarId) broadcast;\n  setState(string state, int32 timestamp) required broadcast ram;\n};\n\ndclass DistributedTrophyMgr : DistributedObject {\n  requestTrophyScore() airecv clsend;\n};\n\ndclass DistributedBuilding : DistributedObject {\n  setBlock(uint16 block, uint32 interiorZoneId) required broadcast ram;\n  setSuitData(int8 suitTrack, int8 difficulty, int8 numFloors) required broadcast ram;\n  setVictorList(uint32 victorList[]) broadcast ram;\n  setState(string state, int16 timestamp) broadcast ram;\n  setVictorReady() airecv clsend;\n};\n\ndclass DistributedAnimBuilding : DistributedBuilding {\n};\n\ndclass DistributedToonInterior : DistributedObject {\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\n  setToonData(blob toonData) required broadcast ram;\n  setState(string state, int16 timestamp) required broadcast ram;\n  nextSnowmanHeadPart() clsend airecv;\n};\n\ndclass DistributedToonHallInterior : DistributedToonInterior {\n};\n\ndclass DistributedSuitInterior : DistributedObject {\n  setZoneId(uint32 zoneId) required broadcast ram;\n  setExtZoneId(uint32 extZoneId) required broadcast ram;\n  setDistBldgDoId(uint32 distBldgDoId) required broadcast ram;\n  setNumFloors(int8 numFloors) required broadcast ram;\n  setToons(uint32 toonIds[], uint16 hack) broadcast ram;\n  setSuits(uint32 suitIds[], uint32 reserveIds[], uint16 values[]) broadcast ram;\n  setState(string state, int16 timestamp) required broadcast ram;\n  setAvatarJoined() airecv clsend;\n  elevatorDone() airecv clsend;\n  reserveJoinDone() airecv clsend;\n};\n\ndclass DistributedCogdoBarrel : DistributedObject {\n  requestGrab() airecv clsend;\n  setIndex(uint32 index) required broadcast ram;\n  setState(uint32 state) required broadcast ram;\n  setGrab(uint32 avId) broadcast ram;\n  setReject() broadcast;\n};\n\ndclass DistributedCogdoInterior : DistributedObject {\n  setZoneId(uint32 zoneId) required broadcast ram;\n  setExtZoneId(uint32 extZoneId) required broadcast ram;\n  setDistBldgDoId(uint32 distBldgDoId) required broadcast ram;\n  setNumFloors(int8 numFloors) required broadcast ram;\n  setShopOwnerNpcId(uint32 npcId) required broadcast ram;\n  setSOSNpcId(uint32 npcId) broadcast ram;\n  setFOType(int8 typeId) broadcast ram;\n  setToons(uint32 toonIds[], uint16 hack) broadcast ram;\n  setSuits(uint32 suitIds[], uint32 reserveIds[], uint16 values[]) broadcast ram;\n  setState(string state, int16 timestamp) required broadcast ram;\n  setAvatarJoined() airecv clsend;\n  elevatorDone() airecv clsend;\n  reserveJoinDone() airecv clsend;\n  toonLeftBarrelRoom() airecv clsend;\n  toonBarrelRoomIntroDone() airecv clsend;\n  setBarrelRoomReward(uint32 avIds[], uint8 laffs[]) broadcast;\n  toonBarrelRoomRewardDone() airecv clsend;\n};\n\ndclass DistributedCogdoBattleBldg : DistributedBattleBldg {\n};\n\ndclass DistCogdoGame : DistributedObject {\n  setInteriorId(uint32 interiorId) required broadcast ram;\n  setExteriorZone(uint32 exteriorZone) broadcast ram required;\n  setDifficultyOverrides(int32 difficultyOverride, int32 exteriorZoneOverride) broadcast ram required;\n  setVisible() broadcast;\n  setIntroStart() broadcast;\n  setToonSad(uint32 toonId) broadcast;\n  setToonDisconnect(uint32 toonId) broadcast;\n  setAvatarReady() airecv clsend;\n  setGameStart(int16 timestamp) broadcast;\n  setGameFinish(int16 timestamp) broadcast;\n};\n\ndclass DistCogdoLevelGame : DistCogdoGame, DistributedLevel {\n};\n\ndclass DistCogdoMazeGame : DistCogdoGame {\n  requestAction(uint8 action, uint32 data) airecv clsend;\n  doAction(uint8 action, uint32 data, int16 networkTime) broadcast;\n  setNumSuits(uint8 numSuits[3]) required broadcast;\n  requestUseGag(int16/10 x, int16/10 y, int16/10 h, int16 networkTime) clsend airecv;\n  toonUsedGag(uint32 toonId, int16/10 x, int16/10 y, int16/10 h, int16 networkTime) broadcast;\n  requestSuitHitByGag(uint8 suitType, uint8 suitNum) clsend airecv;\n  suitHitByGag(uint32 toonId, uint8 suitType, uint8 suitNum) broadcast;\n  requestHitBySuit(uint8 suitType, uint8 suitNum, int16 networkTime) clsend airecv;\n  toonHitBySuit(uint32 toonId, uint8 suitType, uint8 suitNum, int16 networkTime) broadcast;\n  requestHitByDrop() clsend airecv;\n  toonHitByDrop(uint32 toonId) broadcast;\n  requestPickUp(uint8 pickupNum) clsend airecv;\n  pickUp(uint32 toonId, uint8 pickupNum, int16 networkTime) broadcast;\n  requestGag(uint8 waterCoolerIndex) clsend airecv;\n  hasGag(uint32 toonId, int16 networkTime) broadcast;\n};\n\ndclass DistCogdoFlyingGame : DistCogdoGame {\n  requestAction(uint8 action, uint8 data) airecv clsend;\n  requestPickUp(uint16 pickupNum, uint8 pickupType) airecv clsend;\n  pickUp(uint32 toonId, uint16 pickupNum, int16 networkTime) broadcast;\n  debuffPowerup(uint32 toonId, uint16 pickupType, int16 networkTime) broadcast;\n  doAction(uint8 action, uint32 data) broadcast;\n  eagleExitCooldown(uint32 eagleId, int16 networkTime) broadcast;\n  toonSetAsEagleTarget(uint32 toonId, uint8 eagleId, int16 networkTime) broadcast;\n  toonClearAsEagleTarget(uint32 toonId, uint8 eagleId, int16 networkTime) broadcast;\n  toonDied(uint32 toonId, int32 networkTime) broadcast;\n  toonSpawn(uint32 toonId, int32 networkTime) broadcast;\n  toonSetBlades(uint32 toonId, int32 fuelState) broadcast;\n  toonBladeLost(uint32 toonId) broadcast;\n};\n\ndclass DistCogdoBoardroomGame : DistCogdoLevelGame {\n};\n\ndclass DistCogdoCraneGame : DistCogdoLevelGame {\n};\n\ndclass DistCogdoCrane : DistributedObject {\n  setCraneGameId(uint32 craneGameId) required broadcast ram;\n  setIndex(uint8 index) required broadcast ram;\n  setState(char state, uint32 avId) broadcast ram;\n  clearSmoothing(int8 bogus) broadcast clsend;\n  setCablePos(uint8 changeSeq, int16/100 y, uint16%360/100 h, LinkPosition links[3], int16 timestamp) broadcast clsend;\n};\n\ndclass DistCogdoCraneObject : DistributedObject {\n  setCraneGameId(uint32) required broadcast ram;\n  setObjectState(char, uint32, uint32) broadcast ram;\n  requestGrab() airecv clsend;\n  rejectGrab();\n  requestDrop() airecv clsend;\n  hitFloor() clsend;\n  requestFree(int16/10, int16/10, int16/10, uint16%360/100) airecv clsend;\n  hitBoss(uint16/255) airecv clsend;\n  setX(int16/10) broadcast ram clsend airecv;\n  setY(int16/10) broadcast ram clsend airecv;\n  setZ(int16/10) broadcast ram clsend airecv;\n  setH(int16%360/10) broadcast ram clsend airecv;\n  setP(int16%360/10) broadcast ram clsend airecv;\n  setR(int16%360/10) broadcast ram clsend airecv;\n  setPos : setX, setY, setZ;\n  setHpr : setH, setP, setR;\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\n  setXY : setX, setY;\n  setXZ : setX, setZ;\n  setXYH : setX, setY, setH;\n  setXYZH : setX, setY, setZ, setH;\n  setComponentL(uint64) broadcast ram clsend airecv;\n  setComponentX(int16/10) broadcast ram clsend airecv;\n  setComponentY(int16/10) broadcast ram clsend airecv;\n  setComponentZ(int16/10) broadcast ram clsend airecv;\n  setComponentH(int16%360/10) broadcast ram clsend airecv;\n  setComponentP(int16%360/10) broadcast ram clsend airecv;\n  setComponentR(int16%360/10) broadcast ram clsend airecv;\n  setComponentT(int16) broadcast ram clsend airecv;\n  setSmStop : setComponentT;\n  setSmH : setComponentH, setComponentT;\n  setSmZ : setComponentZ, setComponentT;\n  setSmXY : setComponentX, setComponentY, setComponentT;\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  clearSmoothing(int8) broadcast clsend;\n};\n\ndclass DistCogdoCraneMoneyBag : DistCogdoCraneObject {\n  setIndex(uint8 index) required broadcast ram;\n  requestInitial() airecv clsend;\n};\n\ndclass DistCogdoCraneCog : DistributedObject {\n  setGameId(uint32 gameId) required broadcast ram;\n  setDNAString(blob dnaString) required broadcast ram;\n  setSpawnInfo(uint8 entranceId, int16 timestamp) required broadcast ram;\n};\n\ndclass DistributedHQInterior : DistributedObject {\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\n  setLeaderBoard(blob leaderData) required broadcast ram;\n  setTutorial(uint8 flag) required broadcast ram;\n};\n\ndclass DistributedGagshopInterior : DistributedObject {\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\n};\n\ndclass DistributedPetshopInterior : DistributedObject {\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\n};\n\ndclass DistributedKartShopInterior : DistributedObject {\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\n};\n\ndclass DistributedDoor : DistributedObject {\n  setZoneIdAndBlock(uint32 zoneId, uint32 block) required broadcast ram;\n  setSwing(int8 flags) required broadcast ram;\n  setDoorType(uint8 doorType) required broadcast ram;\n  setDoorIndex(uint8 doorIndex) required broadcast ram;\n  setOtherZoneIdAndDoId(uint32 zoneId, uint32 distributedObjectID);\n  requestEnter() airecv clsend;\n  requestExit() airecv clsend;\n  rejectEnter(int8 reason);\n  avatarEnter(uint32 avatarID) broadcast;\n  avatarExit(uint32 avatarID) broadcast;\n  setState(string state, int16 timestamp) required broadcast ram;\n  setExitDoorState(string state, int16 timestamp) required broadcast ram;\n};\n\ndclass DistributedAnimDoor : DistributedDoor {\n};\n\ndclass DistributedHouseDoor : DistributedDoor {\n};\n\ndclass DistributedCogHQDoor : DistributedDoor {\n};\n\ndclass DistributedSellbotHQDoor : DistributedCogHQDoor {\n  informPlayer(uint8 suitType) broadcast ram;\n};\n\ndclass DistributedNPCToonBase : DistributedNode {\n  setName(string name) required broadcast ram;\n  setDNAString(blob dnaString) required broadcast ram;\n  setPositionIndex(uint8 posIndex) required broadcast ram;\n  setAnimState(string animName, int16/1000 animMultiplier, int16 timestamp) broadcast ram;\n  setPageNumber(int16 paragraph, int8 pageNumber, int16 timestamp) broadcast ram clsend;\n  avatarEnter() airecv clsend;\n  freeAvatar();\n};\n\ndclass DistributedNPCToon : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint16 quests[], int16 timestamp) broadcast ram;\n  setMovieDone() airecv clsend;\n  chooseQuest(uint16 questId) airecv clsend;\n  chooseTrack(int8 trackId) airecv clsend;\n};\n\ndclass DistributedNPCSnowballGiver : DistributedNPCToonBase {\n  gaveSnowballs(uint32 npcId, uint32 avId, uint8 sbPhraseId) broadcast ram;\n};\n\ndclass DistributedNPCSpecialQuestGiver : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint16 quests[], int16 timestamp) broadcast ram;\n  setMovieDone() airecv clsend;\n  chooseQuest(uint16 questId) airecv clsend;\n  chooseTrack(int8 trackId) airecv clsend;\n};\n\ndclass DistributedNPCFlippyInToonHall : DistributedNPCToon {\n};\n\ndclass DistributedNPCScientist : DistributedNPCToonBase {\n  setChat(char topic[0-1024], uint8 partPos, uint32 partId, uint8 progress, uint8 flags) ownsend broadcast;\n};\n\ndclass DistributedNPCClerk : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, int16 timestamp) broadcast ram;\n  setInventory(blob inventoryNetString, int16, uint8) airecv clsend;\n};\n\ndclass DistributedNPCTailor : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, int16 timestamp) broadcast ram;\n  setDNA(blob dna, int8 black, uint8 heads) airecv clsend;\n  setCustomerDNA(uint32 avId, blob dnaString) broadcast ram;\n};\n\ndclass DistributedNPCBlocker : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, int16 timestamp) broadcast ram;\n};\n\ndclass DistributedNPCFisherman : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\n  completeSale(uint8 sell) airecv clsend;\n};\n\ndclass DistributedNPCPartyPerson : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\n  answer(uint8 wantsToPlan) airecv clsend;\n};\n\ndclass DistributedNPCPetclerk : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\n  setPetSeeds(uint32 petSeeds[]);\n  petAdopted(uint8 petNum, uint32 nameIndex) airecv clsend;\n  petReturned() airecv clsend;\n  fishSold() airecv clsend;\n  transactionDone() airecv clsend;\n};\n\ndclass DistributedNPCKartClerk : DistributedNPCToonBase {\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\n  buyKart(uint8 whichKart) airecv clsend;\n  buyAccessory(uint8 whichAcc) airecv clsend;\n  transactionDone() airecv clsend;\n};\n\ndclass DistributedKnockKnockDoor : DistributedAnimatedProp {\n};\n\ndclass DistributedElevator : DistributedObject {\n  setBldgDoId(uint32 bldgDoId) required broadcast ram;\n  setState(string state, int16 timestamp) broadcast ram;\n  fillSlot0(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  fillSlot1(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  fillSlot2(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  fillSlot3(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  fillSlot4(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  fillSlot5(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  fillSlot6(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  fillSlot7(uint32 avId, uint8 wantBoardingShow) broadcast ram;\n  emptySlot0(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  emptySlot1(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  emptySlot2(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  emptySlot3(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  emptySlot4(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  emptySlot5(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  emptySlot6(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  emptySlot7(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32 avId, uint8 reason);\n  requestExit() airecv clsend;\n  setElevatorTripId(uint32 id) required broadcast ram;\n  setAntiShuffle(uint8 antiShuffle) required broadcast ram;\n  setMinLaff(uint8 minLaff) required broadcast ram;\n};\n\ndclass DistributedElevatorFSM : DistributedObject {\n  setBldgDoId(uint32 bldgDoId) required broadcast ram;\n  setState(string state, int16 timestamp) broadcast ram;\n  fillSlot0(uint32 avId) broadcast ram;\n  fillSlot1(uint32 avId) broadcast ram;\n  fillSlot2(uint32 avId) broadcast ram;\n  fillSlot3(uint32 avId) broadcast ram;\n  fillSlot4(uint32 avId) broadcast ram;\n  fillSlot5(uint32 avId) broadcast ram;\n  fillSlot6(uint32 avId) broadcast ram;\n  fillSlot7(uint32 avId) broadcast ram;\n  emptySlot0(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  emptySlot1(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  emptySlot2(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  emptySlot3(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  emptySlot4(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  emptySlot5(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  emptySlot6(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  emptySlot7(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32 avId, uint8 reason);\n  requestExit() airecv clsend;\n  setElevatorTripId(uint32 id) required broadcast ram;\n  setAntiShuffle(uint8 antiShuffle) required broadcast ram;\n  setMinLaff(uint8 minLaff) required broadcast ram;\n};\n\ndclass DistributedElevatorFloor : DistributedElevatorFSM {\n  setFloor(int8 floorNumber) broadcast ram;\n  setLocked(uint16 locked) required broadcast ram;\n  setEntering(uint16 entering) required broadcast ram;\n  kickToonsOut() broadcast;\n  setLatch(uint32 markerId) required broadcast ram;\n};\n\ndclass DistributedElevatorExt : DistributedElevator {\n  setFloor(int8 floorNumber) broadcast ram;\n};\n\ndclass DistributedLawOfficeElevatorExt : DistributedElevatorExt {\n  setEntranceId(uint8 entranceId) required broadcast ram;\n  setLawOfficeInteriorZone(uint32 zoneId);\n  setLawOfficeInteriorZoneForce(uint32 zoneId);\n};\n\ndclass DistributedElevatorInt : DistributedElevator {\n  requestBuildingExit() airecv clsend;\n  forcedExit(uint32 avId);\n};\n\ndclass DistributedFactoryElevatorExt : DistributedElevatorExt {\n  setEntranceId(uint8 entranceId) required broadcast ram;\n  setFactoryInteriorZone(uint32 zoneId);\n  setFactoryInteriorZoneForce(uint32 zoneId);\n};\n\ndclass DistributedMintElevatorExt : DistributedElevatorExt {\n  setMintId(uint16 mintId) required broadcast ram;\n  setMintInteriorZone(uint32 zoneId);\n  setMintInteriorZoneForce(uint32 zoneId);\n};\n\ndclass DistributedCogdoElevatorExt : DistributedElevatorExt {\n};\n\ndclass DistributedLawOfficeElevatorInt : DistributedElevatorFloor {\n  setLawOfficeInteriorZone(uint32 zoneId);\n};\n\ndclass DistributedCogdoElevatorInt : DistributedElevatorInt {\n};\n\ndclass DistributedBossElevator : DistributedElevatorExt {\n  setBossOfficeZone(uint32 zoneId);\n  setBossOfficeZoneForce(uint32 zoneId);\n};\n\ndclass DistributedVPElevator : DistributedBossElevator {\n};\n\ndclass DistributedCFOElevator : DistributedBossElevator {\n};\n\ndclass DistributedCJElevator : DistributedBossElevator {\n};\n\ndclass DistributedBBElevator : DistributedBossElevator {\n};\n\ndclass DistributedBoardingParty : DistributedObject {\n  postGroupInfo(uint32 leaderId, uint32 memberList[], uint32 inviteeList[], uint32 kickedList[]) broadcast;\n  informDestinationInfo(uint8 offset) clsend airecv;\n  postDestinationInfo(uint8 offset) broadcast;\n  postInvite(uint32 leaderId, uint32 inviterId) broadcast;\n  postInviteCanceled() broadcast;\n  postKick(uint32 leaderId) broadcast;\n  postKickReject(uint32 leaderId, uint32 inviterId, uint32 inviteeId) broadcast;\n  postSizeReject(uint32 leaderId, uint32 inviterId, uint32 inviteeId) broadcast;\n  postInviteAccepted(uint32 inviteeId) broadcast;\n  postInviteDelcined(uint32 inviteeId) broadcast;\n  postInviteNotQualify(uint32 avId, int8 reason, uint32 elevatorId) broadcast;\n  postAlreadyInGroup() broadcast;\n  postGroupDissolve(uint32 quitterId, uint32 leaderId, uint32 memberList[], uint8 kick) broadcast;\n  postMessageAcceptanceFailed(uint32 inviteeId, int8 reason) broadcast;\n  postGroupAlreadyFull() broadcast;\n  postSomethingMissing() broadcast;\n  postRejectBoard(uint32 elevatorId, int8 reason, uint32 avatarsFailingRequirements[], uint32 avatarsInBattle[]) broadcast;\n  postRejectGoto(uint32 elevatorId, int8 reason, uint32 avatarsFailingRequirements[], uint32 avatarsInBattle[]) broadcast;\n  postMessageInvited(uint32 inviteeId, uint32 inviterId) broadcast;\n  postMessageInvitationFailed(uint32 inviterId) broadcast;\n  acceptGoToFirstTime(uint32 elevatorId) broadcast;\n  acceptGoToSecondTime(uint32 elevatorId) broadcast;\n  rejectGoToRequest(uint32 elevatorId, int8 reason, uint32 avatarsFailingRequirements[], uint32 avatarsInBattle[]) broadcast;\n  requestInvite(uint32 inviteeId) airecv clsend;\n  requestCancelInvite(uint32 inviteeId) airecv clsend;\n  requestAcceptInvite(uint32 leaderId, uint32 inviterId) airecv clsend;\n  requestRejectInvite(uint32 leaderId, uint32 inviterId) airecv clsend;\n  requestKick(uint32 kickId) airecv clsend;\n  requestLeave(uint32 place) airecv clsend;\n  requestBoard(uint32 elevatorId) airecv clsend;\n  requestGoToFirstTime(uint32 elevatorId) airecv clsend;\n  requestGoToSecondTime(uint32 elevatorId) airecv clsend;\n  setElevatorIdList(uint32 elevatorIdList[]) required broadcast ram;\n  setGroupSize(uint8 groupSize) required broadcast ram;\n};\n\ndclass DistributedTutorialInterior : DistributedObject {\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\n  setTutorialNpcId(uint32 npcId) required broadcast ram;\n};\n\ndclass DistributedBankMgr : DistributedObject {\n  transferMoney(int16 amount) airecv clsend;\n};\n\ndclass DistributedMailbox : DistributedObject {\n  setHouseId(uint32 houseId) required broadcast ram;\n  setHousePos(uint8 housePosInd) required broadcast ram;\n  setName(string name) required broadcast ram;\n  setFullIndicator(uint8 full) broadcast ram;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  freeAvatar();\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\n  acceptItemMessage(uint16 todo0, blob todo1, uint8 todo2, int32 todo3) airecv clsend;\n  acceptItemResponse(uint16 context, int8 retcode);\n  discardItemMessage(uint16 todo0, blob todo1, uint8 todo2, int32 todo3) airecv clsend;\n  discardItemResponse(uint16 context, int8 retcode);\n  acceptInviteMessage(uint16 todo0, uint64 todo1) airecv clsend;\n  rejectInviteMessage(uint16 todo0, uint64 todo1) airecv clsend;\n  markInviteReadButNotReplied(uint64 todo0) airecv clsend;\n};\n\ndclass DistributedFurnitureManager : DistributedObject {\n  setOwnerId(uint32 ownerId) required broadcast ram;\n  setOwnerName(string ownerName) required broadcast ram;\n  setInteriorId(uint32 interiorId) required broadcast ram;\n  setAtticItems(blob atticItems) required broadcast ram;\n  setAtticWallpaper(blob atticWallpaper) required broadcast ram;\n  setAtticWindows(blob atticWindows) required broadcast ram;\n  setDeletedItems(blob deletedItems) required broadcast ram;\n  suggestDirector(uint32 directorId) airecv clsend;\n  setDirector(uint32 directorId) broadcast ram;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  moveItemToAtticMessage(uint32 doId, uint16 context) airecv clsend;\n  moveItemToAtticResponse(int8 retval, uint16 context);\n  moveItemFromAtticMessage(uint16 index, int16/10 x, int16/10 y, int16/100 z, int16/10 h, int16/10 p, int16/10 r, uint16 context) airecv clsend;\n  moveItemFromAtticResponse(int8 retval, uint32 doId, uint16 context);\n  deleteItemFromAtticMessage(blob item, uint16 index, uint16 context) airecv clsend;\n  deleteItemFromAtticResponse(int8 retval, uint16 context);\n  deleteItemFromRoomMessage(blob item, uint32 doId, uint16 context) airecv clsend;\n  deleteItemFromRoomResponse(int8 retval, uint16 context);\n  moveWallpaperFromAtticMessage(uint16 index, uint8 room, uint16 context) airecv clsend;\n  moveWallpaperFromAtticResponse(int8 retval, uint16 context);\n  deleteWallpaperFromAtticMessage(blob item, uint16 index, uint16 context) airecv clsend;\n  deleteWallpaperFromAtticResponse(int8 retval, uint16 context);\n  moveWindowToAtticMessage(uint8 slot, uint16 context) airecv clsend;\n  moveWindowToAtticResponse(int8 retval, uint16 context);\n  moveWindowFromAtticMessage(uint16 index, uint8 slot, uint16 context) airecv clsend;\n  moveWindowFromAtticResponse(int8 retval, uint16 context);\n  moveWindowMessage(uint8 fromSlot, uint8 toSlot, uint16 context) airecv clsend;\n  moveWindowResponse(int8 retval, uint16 context);\n  deleteWindowFromAtticMessage(blob item, uint16 index, uint16 context) airecv clsend;\n  deleteWindowFromAtticResponse(int8 retval, uint16 context);\n  recoverDeletedItemMessage(blob item, uint16 index, uint16 context) airecv clsend;\n  recoverDeletedItemResponse(int8 retval, uint16 context);\n};\n\ndclass DistributedFurnitureItem : DistributedSmoothNode {\n  setItem(uint32 furnitureMgrId, blob item) required broadcast ram;\n  requestPosHpr(uint8 final, int16/10 x, int16/10 y, int16/100 z, int16/10 h, int16/10 p, int16/10 r, int16 t) airecv clsend;\n  setMode(uint8 mdoe, uint32 avId) required broadcast ram;\n};\n\ndclass DistributedBank : DistributedFurnitureItem {\n  avatarEnter() airecv clsend;\n  freeAvatar();\n  setMovie(uint8 mode, uint32 avId, int16 timestamp) broadcast ram;\n  transferMoney(int16 amount) airecv clsend;\n};\n\ndclass DistributedCloset : DistributedFurnitureItem {\n  setOwnerId(uint32 avId) required broadcast ram;\n  enterAvatar() airecv clsend;\n  freeAvatar();\n  removeItem(blob trashItem, uint8 t_or_b) airecv clsend;\n  setDNA(blob dnaString, int8 finished, uint8 whichItems) airecv clsend;\n  setState(uint8 mode, uint32 avId, uint32 ownerId, string gender, uint8 topList[], uint8 botList[]) broadcast ram;\n  setMovie(uint8 mode, uint32 avId, int16 timestamp) broadcast ram;\n  resetItemLists() broadcast ram;\n  setCustomerDNA(uint32 avId, blob dnaString) broadcast ram;\n};\n\ndclass DistributedTrunk : DistributedCloset {\n  setState(uint8 mode, uint32 avId, uint32 ownerId, string gender, uint8 hatList[], uint8 glassesList[], uint8 backpackList[], uint8 shoesList[]) broadcast ram;\n  removeItem(uint8 todo0, uint8 todo1, uint8 todo2, uint8 todo3) airecv clsend;\n  setDNA(uint8 todo0, uint8 todo1, uint8 todo2, uint8 todo3, uint8 todo4, uint8 todo5, uint8 todo6, uint8 todo7, uint8 todo8, uint8 todo9, uint8 todo10, uint8 todo11, int8 todo12, uint8 todo13) airecv clsend;\n  setCustomerDNA(uint32 avId, uint8 hatIdx, uint8 hatTexture, uint8 hatColor, uint8 glassesIdx, uint8 glassesTexture, uint8 glassesColor, uint8 backpackIdx, uint8 backpackTexture, uint8 backpackColor, uint8 shoesIdx, uint8 shoesTexture, uint8 shoesColor, uint8 which) broadcast ram;\n};\n\ndclass DistributedPhone : DistributedFurnitureItem {\n  setInitialScale(uint8/170 sx, uint8/170 sy, uint8/170 sz) required broadcast ram;\n  setNewScale(uint8/170 sx, uint8/170 sy, uint8/170 sz) airecv clsend;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  freeAvatar();\n  setLimits(uint16 numHouseItems);\n  setMovie(uint8 mode, uint32 avId, int32 timestamp) broadcast ram;\n  requestPurchaseMessage(uint16 context, blob data, int32 optional) airecv clsend;\n  requestPurchaseResponse(uint16 context, int8 retcode);\n  requestGiftPurchaseMessage(uint16 context, uint32 targetDoID, blob data, int32 optional) airecv clsend;\n  requestGiftPurchaseResponse(uint16 context, int8 retcode);\n};\n\ndclass DistributedFireworkShow : DistributedObject {\n  startShow(uint8 eventId, uint8 style, uint8 songId, int16 timestamp) broadcast ram;\n  requestFirework(int16/10 x, int16/10 y, int16/100 z, uint8 style, uint8 color1, uint8 color2) airecv clsend;\n  shootFirework(int16/10 x, int16/10 y, int16/100 z, uint8 style, uint8 color1, uint8 color2) broadcast;\n};\n\ndclass DistributedFireworksCannon : DistributedFireworkShow {\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  freeAvatar();\n  setMovie(uint8 mode, uint32 avId, int16 timestamp) broadcast ram;\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\n};\n\ndclass LobbyManager : DistributedObject {\n};\n\ndclass DistributedFactory : DistributedLevel {\n  setFactoryId(uint16 id) required broadcast ram;\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\n  setForemanConfronted(uint32 avId) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedLawOffice : DistributedObject {\n  setLawOfficeId(uint16 id) required broadcast ram;\n  startSignal() broadcast ram;\n  readyForNextFloor() airecv clsend;\n};\n\ndclass DistributedLawOfficeFloor : DistributedLevel {\n  setLawOfficeId(uint16 id) required broadcast ram;\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\n  readyForNextFloor() airecv clsend;\n  setForemanConfronted(uint32 avId) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedMint : DistributedObject {\n  setZoneId(uint32 zoneId) required broadcast ram;\n  setMintId(uint16 id) required broadcast ram;\n  setFloorNum(uint8 num) required broadcast ram;\n  setRoomDoIds(uint32 roomDoIds[]) broadcast ram;\n};\n\ndclass DistributedMintRoom : DistributedLevel {\n  setMintId(uint16 mintId) required broadcast ram;\n  setRoomId(uint16 roomId) required broadcast ram;\n  setRoomNum(uint8 num) required broadcast ram;\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\n  setBossConfronted(uint32 avId) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedStage : DistributedObject {\n  setZoneId(uint32 zoneId) required broadcast ram;\n  setStageId(uint16 id) required broadcast ram;\n  setLayoutIndex(uint16 layoutIndex) required broadcast ram;\n  setFloorNum(uint8 num) required broadcast ram;\n  setRoomDoIds(uint32 roomDoIds[]) broadcast ram;\n  setStageZone(uint32 zoneId) broadcast ram;\n  elevatorAlert(uint32 avId) broadcast ram;\n};\n\ndclass DistributedStageRoom : DistributedLevel {\n  setStageId(uint16 stageId) required broadcast ram;\n  setRoomId(uint16 roomId) required broadcast ram;\n  setRoomNum(uint8 num) required broadcast ram;\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\n  setBossConfronted(uint32 avId) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedInGameEditor : DistributedObject {\n  setEditorAvId(uint32) required broadcast ram;\n  setEditUsername(blob) required broadcast ram;\n  setLevelDoId(uint32) required broadcast ram;\n  requestCurrentLevelSpec() airecv clsend;\n  setSpecSenderDoId(uint32);\n  setEdit(uint32, blob, blob, blob) airecv clsend;\n  setAttribChange(uint32, blob, blob, blob);\n  setFinished() airecv clsend;\n};\n\ndclass DistributedLift : DistributedEntity {\n  setStateTransition(uint8 toState, uint8 fromState, uint32 arrivalTimestamp) required broadcast ram;\n  setAvatarEnter() airecv clsend;\n  setAvatarLeave() airecv clsend;\n};\n\ndclass DistributedDoorEntity : DistributedEntity {\n  setLocksState(uint16 stateBits) required broadcast ram;\n  setDoorState(uint8 stateIndex, int32 timeStamp) required broadcast ram;\n  requestOpen() airecv clsend;\n};\n\ndclass DistributedSwitch : DistributedInteractiveEntity {\n};\n\ndclass DistributedButton : DistributedSwitch {\n};\n\ndclass DistributedTrigger : DistributedSwitch {\n};\n\ndclass DistributedCrushableEntity : DistributedEntity {\n  setPosition(int16/10 x, int16/10 y, int16/10 z) broadcast ram;\n  setCrushed(uint32 crusherId, uint8 axis) broadcast ram;\n};\n\ndclass DistributedCrusherEntity : DistributedEntity {\n};\n\ndclass DistributedElevatorMarker : DistributedEntity {\n};\n\ndclass DistributedStomper : DistributedCrusherEntity {\n  setMovie(uint8 mode, int16 timestamp, uint32 crushedList[]) broadcast ram;\n};\n\ndclass DistributedStomperPair : DistributedEntity {\n  setChildren(uint32 doIds[]) broadcast ram;\n  setSquash() airecv clsend;\n};\n\ndclass DistributedBarrelBase : DistributedEntity {\n  requestGrab() airecv clsend;\n  setGrab(uint32 avId) broadcast ram;\n  setReject() broadcast;\n};\n\ndclass DistributedGagBarrel : DistributedBarrelBase {\n};\n\ndclass DistributedBeanBarrel : DistributedBarrelBase {\n};\n\ndclass DistributedHealBarrel : DistributedBarrelBase {\n};\n\ndclass DistributedGrid : DistributedEntity {\n};\n\ndclass ActiveCell : DistributedEntity {\n  setState(uint8 state, uint32 objId) broadcast ram;\n};\n\ndclass DirectionalCell : ActiveCell {\n};\n\ndclass CrusherCell : ActiveCell {\n};\n\ndclass DistributedCrate : DistributedCrushableEntity {\n  requestPush(uint8 side) airecv clsend;\n  setReject();\n  setAccept() broadcast;\n  setMoveTo(uint32 avId, int16/10 x0, int16/10 y0, int16/10 z0, int16/10 x1, int16/10 y1, int16/10 z1) broadcast ram;\n  setDone() airecv clsend;\n};\n\ndclass DistributedSinkingPlatform : DistributedEntity {\n  setOnOff(uint8 on, uint32 timestamp) airecv clsend;\n  setSinkMode(uint32 avId, uint8 mode, uint32 ts) broadcast ram;\n};\n\ndclass DistributedGoon : DistributedCrushableEntity {\n  requestBattle(int16/10 pauseTime) airecv clsend;\n  requestStunned(int16/10 pauseTime) airecv clsend;\n  requestResync() airecv clsend;\n  setParameterize(int16/10 x, int16/10 y, int16/10 z, uint32 pathIndex) airecv clsend;\n  setMovie(uint8 mode, uint32 avId, int32/10 pauseTime, int16 timestamp) broadcast ram;\n};\n\ndclass DistributedGridGoon : DistributedGoon {\n  setPathPts(int16/10 xi, int16/10 yi, int16/10 zi, int16/10 xf, int16/10 yf, int16/10 zf) broadcast ram;\n};\n\ndclass BattleBlocker : DistributedEntity {\n  setActive(uint8 active) required broadcast ram;\n  setSuits(uint32 suitIds[]) broadcast ram;\n  setBattle(uint32 battleId) broadcast ram;\n  setBattleFinished() broadcast ram;\n};\n\ndclass DistributedLaserField : BattleBlocker {\n  setGrid(uint8 gridNumX, uint8 gridNumY) required broadcast ram;\n  setField(uint8 fieldData[]) required broadcast ram;\n  setSuccess(uint8 success) broadcast ram;\n  hit(int8 hitX, int8 hitY, int8 oldX, int8 oldY) airecv clsend;\n  trapFire() airecv clsend;\n  setActiveLF(uint8 active) broadcast ram;\n  hideSuit(uint32 suitIdarray[]) broadcast ram;\n  showSuit(uint32 suitIdarray[]) broadcast ram;\n  setGridGame(string gameName) broadcast ram;\n};\n\nstruct golfGreenGameBoardData {\n  uint8 posX;\n  uint8 posZ;\n  uint8 typeIndex;\n};\n\nstruct golfGreenGameScoreData {\n  uint32 avId;\n  uint8 score;\n};\n\ndclass DistributedGolfGreenGame : BattleBlocker {\n  requestJoin() airecv clsend;\n  leaveGame() airecv clsend;\n  acceptJoin(uint16 time, int32 timeStamp, uint32 avIds[]) broadcast ram;\n  requestBoard(uint8 boardVerify) airecv clsend;\n  startBoard(golfGreenGameBoardData board[], uint8 attackPattern[]);\n  signalDone(uint8 success) broadcast ram;\n  boardCleared(uint32 avId);\n  scoreData(uint8 total, uint8 closed, golfGreenGameScoreData scoreList[]) broadcast ram;\n  informGag(uint8 track, uint8 level);\n  helpOthers(uint32 avId) broadcast;\n  setTimerStart(uint16 time, int32 timeStamp) broadcast ram;\n};\n\ndclass DistributedSecurityCamera : DistributedEntity {\n  trapFire() airecv clsend;\n  setTarget(uint8 targetHash) broadcast ram;\n};\n\ndclass DistributedMover : DistributedEntity {\n  startMove(int16 timeStamp) broadcast ram;\n};\n\ntypedef uint16/10000 PetTrait;\n\ndclass DistributedPet : DistributedSmoothNode {\n  setOwnerId(uint32) required broadcast db;\n  setPetName(string) required broadcast db;\n  setTraitSeed(uint32) required broadcast db;\n  setSafeZone(uint32) required broadcast db;\n  setForgetfulness(PetTrait) required broadcast db;\n  setBoredomThreshold(PetTrait) required broadcast db;\n  setRestlessnessThreshold(PetTrait) required broadcast db;\n  setPlayfulnessThreshold(PetTrait) required broadcast db;\n  setLonelinessThreshold(PetTrait) required broadcast db;\n  setSadnessThreshold(PetTrait) required broadcast db;\n  setFatigueThreshold(PetTrait) required broadcast db;\n  setHungerThreshold(PetTrait) required broadcast db;\n  setConfusionThreshold(PetTrait) required broadcast db;\n  setExcitementThreshold(PetTrait) required broadcast db;\n  setAngerThreshold(PetTrait) required broadcast db;\n  setSurpriseThreshold(PetTrait) required broadcast db;\n  setAffectionThreshold(PetTrait) required broadcast db;\n  setHead(int8(-1 - 1)) required broadcast db; // Supposed to be -1 - 0, but minification causes this to become -1-0, which is a parse problem.\n  setEars(int8(-1 - 4)) required broadcast db;\n  setNose(int8(-1 - 3)) required broadcast db;\n  setTail(int8(-1 - 6)) required broadcast db;\n  setBodyTexture(int8(0-6)) required broadcast db;\n  setColor(int8(0-25)) required broadcast db;\n  setColorScale(int8(0-8)) required broadcast db;\n  setEyeColor(int8(0-5)) required broadcast db;\n  setGender(int8(0-1)) required broadcast db;\n  setLastSeenTimestamp(uint32) required broadcast db;\n  setBoredom(uint16/1000(0-1)) required broadcast db;\n  setRestlessness(uint16/1000(0-1)) required broadcast db;\n  setPlayfulness(uint16/1000(0-1)) required broadcast db;\n  setLoneliness(uint16/1000(0-1)) required broadcast db;\n  setSadness(uint16/1000(0-1)) required broadcast db;\n  setAffection(uint16/1000(0-1)) required broadcast db;\n  setHunger(uint16/1000(0-1)) required broadcast db;\n  setConfusion(uint16/1000(0-1)) required broadcast db;\n  setExcitement(uint16/1000(0-1)) required broadcast db;\n  setFatigue(uint16/1000(0-1)) required broadcast db;\n  setAnger(uint16/1000(0-1)) required broadcast db;\n  setSurprise(uint16/1000(0-1)) required broadcast db;\n  setMood : setBoredom, setRestlessness, setPlayfulness, setLoneliness, setSadness, setAffection, setHunger, setConfusion, setExcitement, setFatigue, setAnger, setSurprise;\n  teleportIn(int16) broadcast ownsend;\n  teleportOut(int16) broadcast ownsend;\n  setTrickAptitudes(uint16/10000(0-1) []) required broadcast db;\n  doTrick(uint8, int16) broadcast ram;\n  avatarInteract(uint32);\n  setMovie(uint8, uint32, int16) broadcast ram;\n  freeAvatar();\n};\n\ndclass DistributedPetProxy : DistributedPet {\n  setDominantMood(string dominantMood) broadcast ram;\n};\n\ndclass DistributedBlackCatMgr : DistributedObject {\n  doBlackCatTransformation(uint32 avId) broadcast;\n  requestBlackCatTransformation() airecv clsend;\n};\n\ndclass DistributedPolarBearMgr : DistributedObject {\n  doPolarBearTransformation(uint32 avId) broadcast;\n  requestPolarBearTransformation() airecv clsend;\n};\n\ndclass DistributedPolarPlaceEffectMgr : DistributedObject {\n  addPolarPlaceEffect() airecv clsend;\n};\n\ndclass DistributedGreenToonEffectMgr : DistributedObject {\n  addGreenToonEffect() airecv clsend;\n};\n\ndclass DistributedResistanceEmoteMgr : DistributedObject {\n  addResistanceEmote() airecv clsend;\n};\n\ndclass DistributedScavengerHuntTarget : DistributedObject {\n  attemptScavengerHunt() airecv clsend;\n};\n\ndclass DistributedTrickOrTreatTarget : DistributedScavengerHuntTarget {\n};\n\ndclass DistributedWinterCarolingTarget : DistributedScavengerHuntTarget {\n};\n\ndclass DistributedDataStoreManager : DistributedObject {\n  startStore(uint8 todo0);\n  stopStore(uint8 todo0);\n  queryStore(uint8 todo0, string todo1);\n  receiveResults(uint8 todo0, string todo1);\n  deleteBackupStores();\n};\n\ndclass DistributedVehicle : DistributedSmoothNode {\n  setOwner(uint32 avId) required broadcast ram;\n  setState(char state, uint32 avId) broadcast ram;\n  setBodyType(int8 bodyType) required broadcast ram;\n  setBodyColor(int8 bodyColor) required broadcast ram;\n  setAccessoryColor(int8 accColor) required broadcast ram;\n  setEngineBlockType(int8 ebType) required broadcast ram;\n  setSpoilerType(int8 spType) required broadcast ram;\n  setFrontWheelWellType(int8 fwwType) required broadcast ram;\n  setBackWheelWellType(int8 bwwType) required broadcast ram;\n  setRimType(int8 rimsType) required broadcast ram;\n  setDecalType(int8 decalType) required broadcast ram;\n  requestControl() airecv clsend;\n  requestParked() airecv clsend;\n  setInput(int8 on) broadcast ram;\n};\n\nstruct avatarAndKart {\n  uint32 avId;\n  uint32 kartId;\n};\n\ndclass DistributedRace : DistributedObject {\n  setZoneId(uint32 zoneId) required broadcast ram;\n  setTrackId(uint16 id) required broadcast ram;\n  setRaceType(uint16 raceType) required broadcast ram;\n  setCircuitLoop(uint16 circuitLoop[]) required broadcast ram;\n  setAvatars(uint32 avIds[]) required broadcast ram;\n  setStartingPlaces(uint8 startList[]) required broadcast ram;\n  setLapCount(uint8 lapCount) broadcast required ram;\n  waitingForJoin() broadcast ram;\n  setEnteredRacers(avatarAndKart avAndKarts[]) broadcast ram;\n  prepForRace() broadcast ram;\n  startTutorial() broadcast ram;\n  startRace(int16 startTime) broadcast ram;\n  goToSpeedway(uint32 avIds[], uint8 reason) broadcast ram;\n  genGag(uint8 slot, uint16 number, uint8 type) broadcast ram;\n  dropAnvilOn(uint32 ownerId, uint32 avId, int16 timeStamp) broadcast ram;\n  shootPiejectile(uint32 sourceId, uint32 targetId, uint8 type) broadcast ram;\n  racerDisconnected(uint32 avId) broadcast ram;\n  setPlace(uint32 avId, uint32/1000 totalTime, uint8 place, uint32 entryFee, uint8 qualify, uint32 winnings, uint32 bonus, uint32 trophies[], uint16 circuitPoints[], uint32/1000 circuitTime) broadcast ram;\n  setCircuitPlace(uint32 avId, uint8 place, uint32 entryFee, uint32 winnings, uint32 bonus, uint32 trophies[]) broadcast ram;\n  endCircuitRace() broadcast ram;\n  setRaceZone(uint32 zoneId, uint32 trackId);\n  hasGag(uint8 slot, uint8 type, uint8 index) broadcast airecv clsend;\n  racerLeft(uint32 avId) clsend airecv broadcast ram;\n  heresMyT(uint32 avId, int8 avNumLaps, uint16/65535 avTime, int16 timestamp) clsend airecv broadcast;\n  requestThrow(int32/1000 x, int32/1000 y, int32/1000 z) clsend airecv;\n  requestKart() clsend airecv;\n};\n\ndclass DistributedGag : DistributedObject {\n  setInitTime(int16 initTime) required broadcast ram;\n  setActivateTime(int16 actTime) required broadcast ram;\n  setPos(int32/1000 x, int32/1000 y, int32/1000 z) required broadcast ram;\n  setRace(uint32 doId) required broadcast ram;\n  setOwnerId(uint32 ownerId) required broadcast ram;\n  setType(uint8 type) required broadcast ram;\n  hitSomebody(uint32 avId, int16 timeStamp) broadcast clsend airecv;\n};\n\ndclass DistributedProjectile : DistributedObject {\n  setInitTime(int16 todo0) required broadcast ram;\n  setPos(int32/1000 pos, int32/1000, int32/1000) required broadcast ram;\n  setRace(uint32 todo0) required broadcast ram;\n  setOwnerId(uint32 todo0) required broadcast ram;\n  setType(uint8 todo0) required broadcast ram;\n  hitSomebody(uint32 todo0, int16 todo1) broadcast clsend airecv;\n};\n\ndclass DistributedKartPad : DistributedObject {\n  setArea(uint32 area) required broadcast ram;\n};\n\ndclass DistributedRacePad : DistributedKartPad {\n  setState(string state, int16 timestamp) required broadcast ram;\n  setRaceZone(uint32 zoneId);\n  setTrackInfo(uint16 trackInfo[]) required broadcast ram;\n};\n\ndclass DistributedViewPad : DistributedKartPad {\n  setLastEntered(int16 timeStamp) required broadcast ram;\n};\n\ndclass DistributedStartingBlock : DistributedObject {\n  setPadDoId(uint32 padDoId) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  setPadLocationId(uint8 padLocationId) required broadcast ram;\n  requestEnter(uint8 isPaid) airecv clsend;\n  rejectEnter(uint8 errCode);\n  requestExit() airecv clsend;\n  setOccupied(uint32 avId) broadcast ram;\n  setMovie(uint8 mode) broadcast ram;\n  movieFinished() airecv clsend;\n};\n\ndclass DistributedViewingBlock : DistributedStartingBlock {\n};\n\ndclass DistributedLeaderBoard : DistributedObject {\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  setDisplay(blob pData) broadcast ram;\n};\n\ndclass DistributedDeliveryManager : DistributedObject {\n  hello(string todo0) clsend;\n  rejectHello(string message);\n  helloResponse(string message);\n  getName(uint32 todo0);\n  receiveRejectGetName(string todo0);\n  receiveAcceptGetName(string todo0);\n  addName(uint32 todo0, string todo1);\n  receiveRejectAddName(uint32 todo0);\n  receiveAcceptAddName(uint32 todo0);\n  addGift(uint32 todo0, blob todo1, uint32 todo2, uint32 todo3, uint32 todo4);\n  receiveRejectAddGift(uint32 todo0);\n  receiveAcceptAddGift(uint32 todo0, uint32 todo1, uint32 todo2, uint32 todo3);\n  deliverGifts(uint32 todo0, uint32 todo1);\n  receiveAcceptDeliverGifts(uint32 todo0, string todo1);\n  receiveRejectDeliverGifts(uint32 todo0, string todo1);\n  receiveRequestPayForGift(blob todo0, uint32 todo1, uint32 todo2) airecv clsend;\n  receiveRequestPurchaseGift(blob todo0, uint32 todo1, uint32 todo2, uint32 todo3) airecv;\n  receiveAcceptPurchaseGift(uint32 todo0, uint32 todo1, int16 todo2);\n  receiveRejectPurchaseGift(uint32 todo0, uint32 todo1, int16 todo2, uint16 todo3);\n  heartbeat() airecv;\n  giveBeanBonus(uint32 todo0, uint16 todo1);\n  requestAck() clsend;\n  returnAck();\n  givePartyRefund(uint32 todo0, uint32 todo1, uint64 todo2, int8 todo3, uint16 todo4);\n};\n\ndclass DistributedLawbotBoss : DistributedBossCog {\n  setState(string state) broadcast ram;\n  setBossDamage(uint16 bossDamage, uint8 recoverRate, int16 timestamp) broadcast ram;\n  touchWitnessStand() airecv clsend;\n  hitBoss(uint8 bossDamage) airecv clsend;\n  healBoss(uint8 bossHeal) airecv clsend;\n  hitToon(uint32 toonId) airecv clsend;\n  hitDefensePan() airecv clsend;\n  hitProsecutionPan() airecv clsend;\n  hitChair(uint8 chairNum, uint8 index) airecv clsend;\n  setLawyerIds(uint32 lawyerIds[]) broadcast ram;\n  setTaunt(int8 tauntIndex, int8 extraInfo) broadcast;\n  toonGotHealed(uint32 toonId) broadcast;\n  enteredBonusState() broadcast;\n  setBattleDifficulty(uint8 diff) broadcast ram;\n};\n\ndclass DistributedLawbotBossSuit : DistributedSuitBase {\n  setPosHpr(int16/10 posHpr, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  doAttack(int16/10 x1, int16/10 y1, int16/10 z1, int16/10 x2, int16/10 y2, int16/10 z2) broadcast;\n  doProsecute() broadcast;\n  hitByToon() airecv clsend;\n  doStun() broadcast;\n};\n\ndclass DistributedLawbotBossGavel : DistributedObject {\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setIndex(uint8 index) required broadcast ram;\n  setState(char state) broadcast ram;\n};\n\ndclass DistributedLawbotCannon : DistributedObject {\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setIndex(uint8 index) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  requestEnter() airecv clsend;\n  setMovie(int8 mode, uint32 avId, uint8 extraInfo) broadcast;\n  setCannonPosition(int16/10 rotation, int16/10 angle) airecv clsend;\n  updateCannonPosition(uint32 avId, int16/10 zRot, int16/10 angle) broadcast;\n  setCannonLit(int16/10 rotation, int16/10 angle) airecv clsend;\n  setCannonWillFire(uint32 avId, int16/10 fireTime, int16/10 zRot, int16/10 angle, int16 timestamp) broadcast;\n  setLanded() airecv clsend;\n  requestLeave() airecv clsend;\n};\n\ndclass DistributedLawbotChair : DistributedObject {\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setIndex(uint8 index) required broadcast ram;\n  setState(char state) broadcast ram;\n  showCogJurorFlying() broadcast;\n  setToonJurorIndex(int8 newVal) broadcast ram;\n};\n\ndclass DistributedLawnDecor : DistributedNode {\n  setPlot(int8 plot) required broadcast ram;\n  setHeading(int16/10 h) required broadcast ram;\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\n  setOwnerIndex(int8 index) required broadcast ram;\n  plotEntered() airecv clsend;\n  removeItem() airecv clsend;\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\n  movieDone() airecv clsend;\n  interactionDenied(uint32 avId) broadcast ram;\n};\n\ndclass DistributedGardenPlot : DistributedLawnDecor {\n  plantFlower(uint8 todo0, uint8 todo1) airecv clsend;\n  plantGagTree(uint8 todo0, uint8 todo1) airecv clsend;\n  plantStatuary(uint8 todo0) airecv clsend;\n  plantToonStatuary(uint8 todo0, uint16 todo1) airecv clsend;\n  plantNothing(uint8 todo0) airecv clsend;\n};\n\ndclass DistributedGardenBox : DistributedLawnDecor {\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\n};\n\ndclass DistributedStatuary : DistributedLawnDecor {\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\n  setWaterLevel(int8 waterLevel) required broadcast ram;\n  setGrowthLevel(int8 growthLevel) required broadcast ram;\n};\n\ndclass DistributedToonStatuary : DistributedStatuary {\n  setOptional(uint16 optional) required broadcast ram;\n};\n\ndclass DistributedAnimatedStatuary : DistributedStatuary {\n};\n\ndclass DistributedChangingStatuary : DistributedStatuary {\n  setGrowthLevel(int8 growthLevel) required broadcast ram;\n};\n\ndclass DistributedPlantBase : DistributedLawnDecor {\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\n  setWaterLevel(int8 waterLevel) required broadcast ram;\n  setGrowthLevel(int8 growthLevel) required broadcast ram;\n  waterPlant() airecv clsend;\n  waterPlantDone() airecv clsend;\n};\n\ndclass DistributedFlower : DistributedPlantBase {\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\n  setVariety(uint8 variety) required broadcast ram;\n};\n\ndclass DistributedGagTree : DistributedPlantBase {\n  setWilted(int8 wilted) required broadcast ram;\n  requestHarvest() airecv clsend;\n};\n\ndclass DistributedTravelGame : DistributedMinigame {\n  setTimerStartTime(int16 timestamp) broadcast;\n  setAvatarChoice(uint16 votes, uint8 direction) airecv clsend;\n  setAvatarVotes(uint32 avId, uint16 votes) broadcast;\n  setAvatarChose(uint32 avId) broadcast;\n  setServerChoices(int16 votes[], uint8 directions[], uint8 directionToGo, uint8 directionReason) broadcast;\n  setMinigames(uint8 switches[], uint8 minigames[]) broadcast;\n  setBonuses(uint8 switches[], uint8 beans[]) broadcast;\n  setBoardIndex(uint8 boardIndex) required broadcast ram;\n};\n\ndclass DistributedPairingGame : DistributedMinigame {\n  setDeckSeed(uint32 deckSeed) required broadcast ram;\n  setMaxOpenCards(uint8) broadcast ram;\n  openCardRequest(int16 deckOrderIndex, int16 bonusGlowCard) airecv clsend;\n  openCardResult(int16 cardToTurnUp, uint32 avId, int16 matchingCard, int8 points, int16 cardsToTurnDown[]) broadcast;\n  reportDone() airecv clsend;\n  setEveryoneDone() broadcast;\n  setSignaling(uint32 avId) clsend broadcast;\n};\n\nstruct golfData {\n  int16 frame;\n  int32/100000 x;\n  int32/100000 y;\n  int32/100000 z;\n};\n\nstruct Coord3 {\n  int32/100000 x;\n  int32/100000 y;\n  int32/100000 z;\n};\n\nstruct CommonObjectData {\n  uint8 id;\n  uint8 type;\n  int32/100000 x;\n  int32/100000 y;\n  int32/100000 z;\n  int32/100000 q1;\n  int32/100000 q2;\n  int32/100000 q3;\n  int32/100000 q4;\n  int32/100000 aVX;\n  int32/100000 aVY;\n  int32/100000 aVZ;\n  int32/100000 lVX;\n  int32/100000 lVY;\n  int32/100000 lVZ;\n};\n\ndclass DistributedPhysicsWorld : DistributedObject {\n  clientCommonObject(uint8 type, uint8 commonId, Coord3 pos, Coord3 hpr, int32/100 sizeX, int32/100 sizeY, int32/1000 moveDistance) broadcast ram;\n  setCommonObjects(CommonObjectData objectData[]) broadcast;\n  upSetCommonObjects(CommonObjectData objectData[]) airecv clsend;\n};\n\ndclass DistributedGolfHole : DistributedPhysicsWorld {\n  setHoleId(int8 holeId) broadcast ram required;\n  setTimingCycleLength(uint32/1000 time) broadcast ram required;\n  setAvatarReadyHole() airecv clsend;\n  setGolfCourseDoId(uint32 golfCourseDoId) broadcast ram required;\n  turnDone() airecv clsend;\n  ballInHole() airecv clsend;\n  setAvatarTempTee(uint32 avId, uint8 tempTee) clsend broadcast;\n  setTempAimHeading(uint32 avId, int32/1000 heading) clsend broadcast;\n  setAvatarFinalTee(uint32 avId, uint8 finalTee) broadcast;\n  setGolferIds(uint32 avIds[]) broadcast ram required;\n  golfersTurn(uint32 avId) broadcast;\n  golferChooseTee(uint32 avId) broadcast;\n  setAvatarTee(uint8 tee) airecv clsend;\n  postSwing(uint32/1000 todo0, int32 todo1, int32/1000 todo2, int32/1000 todo3, int32/1000 todo4, int32/1000 todo5, int32/1000 todo6) airecv clsend;\n  postSwingState(uint32/1000 cycleTime, int32 power, int32/1000 bX, int32/1000 bY, int32/1000 bZ, int32/1000 x, int32/1000 y, uint16/100 aimTime, CommonObjectData cod[]) airecv clsend;\n  swing(uint32 todo0, int32 todo1, int32/1000 todo2, int32/1000 todo3, int32/1000 todo4, int32/1000 todo5, int32/1000 todo6) broadcast;\n  ballMovie2AI(uint32/1000 cycleTime, uint32 avId, golfData recording[], golfData aVRecording[], uint16 ballInHoleFrame, uint16 ballTouchedHoleFrame, uint16 ballFirstTouchedHoleFrame, CommonObjectData COD[]) airecv clsend;\n  ballMovie2Client(uint32/1000 cycleTime, uint32 avId, golfData movie[], golfData spinMovie[], uint16 ballInFrame, uint16 ballTouchedHoleFrame, uint16 ballFirstTouchedHoleFrame, CommonObjectData commonObjectData[]) broadcast;\n  assignRecordSwing(uint32 avId, uint32/1000 cycleTime, int32 power, int32/1000 x, int32/1000 y, int32/1000 z, int32/1000 dirX, int32/1000 dirY, CommonObjectData commonObjectData[]);\n  setBox(int32/1000 todo0, int32/1000 todo1, int32/1000 todo2, int32/1000 todo3, int32/1000 todo4, int32/1000 todo5, int32/1000 todo6, int32/1000 todo7, int32/1000 todo8, int32/1000 todo9, int32/1000 todo10, int32/1000 todo11, int32/1000 todo12) airecv clsend;\n  sendBox(int32/1000 pos0, int32/1000 pos1, int32/1000 pos2, int32/1000 quat0, int32/1000 quat1, int32/1000 quat2, int32/1000 quat3, int32/1000 anV0, int32/1000 anV1, int32/1000 anV2, int32/1000 lnV0, int32/1000 lnV1, int32/1000 lnV2) broadcast;\n};\n\ndclass DistributedGolfCourse : DistributedObject {\n  setGolferIds(uint32 avIds[]) broadcast ram required;\n  setCourseId(int8 courseId) broadcast ram required;\n  setAvatarJoined() airecv clsend;\n  setAvatarReadyCourse() airecv clsend;\n  setAvatarReadyHole() airecv clsend;\n  setAvatarExited() airecv clsend;\n  setCurHoleIndex(int8 holeIndex) broadcast ram required;\n  setCurHoleDoId(uint32 holeDoId) broadcast ram required;\n  setDoneReward() airecv clsend;\n  setReward(uint8[] [], int8[], uint8[] [], uint8[] [], uint8[] [], uint32, uint32/100, uint32/100, uint32/100, uint32/100) broadcast;\n  setCourseReady(int8 numHoles, int16 holeIds[], int8 coursePar) broadcast;\n  setHoleStart(int16 UNKNOWN) broadcast;\n  setCourseExit() broadcast;\n  setCourseAbort(uint32 avId) broadcast;\n  setPlayHole() broadcast;\n  avExited(uint32 avId) broadcast;\n  setScores(int16 scoreList[]) broadcast;\n  changeDrivePermission(uint32 avId, int8 canDrive) broadcast;\n};\n\ndclass DistributedVineGame : DistributedMinigame {\n  reachedEndVine(int8 vineIndex) clsend airecv;\n  setNewVine(uint32 avId, int8 vineIndex, uint32/10000 vineT, int8 facingRight) airecv clsend broadcast;\n  setNewVineT(uint32 avId, uint32/10000 vineT, int8 climbDir) clsend broadcast;\n  setJumpingFromVine(uint32 avId, int8 vineIndex, int8 facingRight, int32/100 posX, int16/100 posZ, int16/100 velX, int16 velZ) clsend broadcast;\n  claimTreasure(uint32 treasureNum) airecv clsend;\n  setTreasureGrabbed(uint32 avId, uint32 treasureNum) broadcast;\n  setScore(uint32 avId, uint32 score) broadcast;\n  allAtEndVine() broadcast;\n  setFallingFromVine(uint32 avId, int8 vineIndex, int8 facingRight, int32/100 posX, int16/100 posZ, int16/100 velX, int16 velZ, int8 fallingInfo) clsend broadcast;\n  setFallingFromMidair(uint32 avId, int8 facingRight, int32/100 posX, int16/100 posZ, int16/100 velX, int16 velZ, int8 fallingInfo) clsend broadcast;\n  setVineSections(uint8 vineSections[]) required broadcast ram;\n};\n\ndclass TTAvatarFriendsManager : AvatarFriendsManager {\n};\n\ndclass TTPlayerFriendsManager : PlayerFriendsManager {\n};\n\ndclass TTSpeedchatRelay : SpeedchatRelay {\n};\n\ndclass DistributedGolfKart : DistributedObject {\n  setState(string state, int16 timestamp) broadcast ram;\n  fillSlot0(uint32 avId) broadcast ram;\n  fillSlot1(uint32 avId) broadcast ram;\n  fillSlot2(uint32 avId) broadcast ram;\n  fillSlot3(uint32 avId) broadcast ram;\n  emptySlot0(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot1(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot2(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot3(uint32 avId, int16 timestamp) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32 avId);\n  requestExit() airecv clsend;\n  setMinigameZone(uint32 zoneId, uint16 minigameId);\n  setGolfZone(uint32 zoneId, uint16 courseId);\n  setGolfCourse(int8 golfCourse) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  setColor(int16 r, int16 g, int16 b) required broadcast ram;\n};\n\ndclass DistributedTimer : DistributedObject {\n  setStartTime(int32 time) broadcast ram required;\n};\n\ndclass DistributedPicnicBasket : DistributedObject {\n  setState(string state, uint16 seed, int16 timestamp) broadcast ram;\n  fillSlot0(uint32 avId) broadcast ram;\n  fillSlot1(uint32 avId) broadcast ram;\n  fillSlot2(uint32 avId) broadcast ram;\n  fillSlot3(uint32 avId) broadcast ram;\n  emptySlot0(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot1(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot2(uint32 avId, int16 timestamp) broadcast ram;\n  emptySlot3(uint32 avId, int16 timestamp) broadcast ram;\n  requestBoard(int16 todo0) airecv clsend;\n  rejectBoard(uint32 avId);\n  requestExit() airecv clsend;\n  doneExit() airecv clsend;\n  setMinigameZone(uint32 todo0, uint16 todo1);\n  setPicnicDone();\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  setTableNumber(int16 tn) required broadcast ram;\n};\n\ndclass DistributedBossbotBoss : DistributedBossCog {\n  setState(string state) broadcast ram;\n  setBattleDifficulty(uint8 diff) broadcast ram;\n  requestGetFood(int8 beltIndex, int8 foodIndex, uint32 foodNum) airecv clsend;\n  toonGotFood(uint32 avId, int8 beltIndex, int8 foodIndex, uint32 foodNum) broadcast;\n  requestServeFood(int8 tableIndex, int8 chairIndex) airecv clsend;\n  toonServeFood(uint32 avId, int8 tableIndex, int8 chairIndex) broadcast;\n  hitBoss(uint8 bossDamage) airecv clsend;\n  hitToon(uint32 toonId) airecv clsend;\n  ballHitBoss(uint8 bossDamage) airecv clsend;\n  setBossDamage(uint16 bossDamage, uint8 recoverRate, int16 recoverStartTime) broadcast ram;\n  setSpeedDamage(uint16 speedDamage, uint8 recoverRate, int16 timestamp) broadcast ram;\n  reachedTable(uint8 tableIndex) airecv clsend;\n  hitTable(uint8 tableIndex) airecv clsend;\n  awayFromTable(uint8 tableIndex) airecv clsend;\n  toonGotHealed(uint32 toonId) broadcast;\n  requestGetToonup(int8 beltIndex, int8 toonupIndex, uint32 toonupNum) airecv clsend;\n  toonGotToonup(uint32 avId, int8 beltIndex, int8 toonupIndex, uint32 toonupNum) broadcast;\n};\n\ndclass DistributedCogKart : DistributedElevatorExt {\n  setCountryClubId(uint16 countryClubId) required broadcast ram;\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\n  setCountryClubInteriorZone(uint32 zoneId);\n  setCountryClubInteriorZoneForce(uint32 zoneId);\n};\n\ndclass DistributedCountryClub : DistributedObject {\n  setZoneId(uint32 zoneId) required broadcast ram;\n  setBlockedRooms(uint8 blockedRooms[]) required broadcast ram;\n  setCountryClubId(uint16 id) required broadcast ram;\n  setLayoutIndex(uint16 layoutIndex) required broadcast ram;\n  setFloorNum(uint8 num) required broadcast ram;\n  setRoomDoIds(uint32 roomDoIds[]) broadcast ram;\n  setCountryClubZone(uint32 zoneId) broadcast ram;\n  elevatorAlert(uint32 avId) broadcast ram;\n};\n\ndclass DistributedCountryClubRoom : DistributedLevel {\n  setCountryClubId(uint16 countryClubId) required broadcast ram;\n  setRoomId(uint16 roomId) required broadcast ram;\n  setRoomNum(uint8 num) required broadcast ram;\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\n  setBossConfronted(uint32 avId) broadcast ram;\n  setDefeated() broadcast ram;\n  forceOuch(uint8 penalty) broadcast;\n};\n\ndclass DistributedMoleField : DistributedEntity {\n  setGameStart(int16 timestamp, uint8 molesWhackTarget, uint16 totalTime) broadcast;\n  setClientTriggered() airecv clsend;\n  whackedMole(int8 moleIndex, int16 popupNum) airecv clsend;\n  whackedBomb(int8 moleIndex, int16 popupNum, int32 timestamp) airecv clsend;\n  updateMole(int8 moleIndex, int8 status) broadcast;\n  reportToonHitByBomb(uint32 avId, int8 moleIndex, int32 timestamp) broadcast;\n  setScore(int16 score) required broadcast ram;\n  damageMe() airecv clsend;\n  setPityWin() broadcast;\n};\n\ndclass DistributedCountryClubBattle : DistributedLevelBattle {\n};\n\ndclass DistributedClubElevator : DistributedElevatorFSM {\n  setFloor(int8 floorNumber) broadcast ram;\n  setLocked(uint16 locked) required broadcast ram;\n  setEntering(uint16 entering) required broadcast ram;\n  kickToonsOut() broadcast;\n  setLatch(uint32 markerId) required broadcast ram;\n};\n\ndclass DistributedMaze : DistributedEntity {\n  setRoomDoId(uint32 roomDoId) required broadcast ram;\n  setGameStart(int16 timestamp) broadcast;\n  setClientTriggered() airecv clsend;\n  setFinishedMaze() airecv clsend;\n  setGameOver() broadcast;\n  toonFinished(uint32 avId, uint8 place, uint8 lastToon) broadcast;\n  damageMe() airecv clsend;\n};\n\ndclass DistributedBattleWaiters : DistributedBattleFinal {\n};\n\ndclass DistributedFoodBelt : DistributedObject {\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setIndex(uint8 index) required broadcast ram;\n  setState(char state) broadcast ram;\n};\n\ndclass DistributedBanquetTable : DistributedObject {\n  setIndex(uint8 index) required broadcast ram;\n  setNumDiners(uint8 numDiners) required broadcast ram;\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setDinerInfo(uint8 hungryDurations[], uint8 eatingDurations[], uint8 dinerLevels[]) required broadcast ram;\n  setState(char state, uint32 avId, int8 extraInfo) broadcast ram;\n  setDinerStatus(uint8 chairIndex, uint8 status) broadcast;\n  requestControl() airecv clsend;\n  requestFree(int8 gotHitByBoss) airecv clsend;\n  setPitcherPos(uint8 changeSeq, uint16%360/100 h, int16 timestamp) broadcast clsend;\n  clearSmoothing(int8 bogus) broadcast clsend;\n  firingWater(int32/100 startX, int32/100 startY, int32/100 startZ, int32/100 endX, int32/100 endY, int32/100 endZ) broadcast clsend;\n  waterHitBoss(uint8 tableIndex) broadcast clsend;\n};\n\ndclass DistributedBattleDiners : DistributedBattleFinal {\n};\n\ndclass DistributedGolfSpot : DistributedObject {\n  setIndex(uint8 index) required broadcast ram;\n  setBossCogId(uint32 bossCogId) required broadcast ram;\n  setState(char state, uint32 avId, int8 extraInfo) broadcast ram;\n  setGoingToReward() broadcast ram;\n  requestControl() airecv clsend;\n  requestFree(int8 gotHitByBoss) airecv clsend;\n  setGolfSpotPos(uint8 changeSeq, uint16%360/100 h, int16 timestamp) broadcast clsend;\n  clearSmoothing(int8 bogus) broadcast clsend;\n  setSwingInfo(uint8 power, int16/10 angle, uint8 sequenceNum) broadcast clsend;\n};\n\nstruct TireInput {\n  int32/100 force;\n  int32/100 heading;\n};\n\ndclass DistributedIceGame : DistributedMinigame {\n  setForceArrowInfo(uint32 avId, int32/100 force, int32/100 heading) broadcast clsend;\n  setAvatarChoice(int32/100 force, int32/100 direction) airecv clsend;\n  endingPositions(Coord3 positions[]) airecv clsend;\n  reportScoringMovieDone() airecv clsend;\n  claimTreasure(uint8 treasureNum) airecv clsend;\n  claimPenalty(uint8 penaltyNum) airecv clsend;\n  setTireInputs(TireInput tireInputs[]) broadcast;\n  setTimerStartTime(int16 timestamp) broadcast;\n  setFinalPositions(Coord3 finalPos[]) broadcast;\n  setMatchAndRound(int8 match, int8 round) broadcast;\n  setScores(int8 match, int8 round, int16 scores[]) broadcast;\n  setNewState(string state) broadcast;\n  setTreasureGrabbed(uint32 avId, uint32 treasureNum) broadcast;\n  setPenaltyGrabbed(uint32 avId, uint32 penaltyNum) broadcast;\n};\n\ndclass DistributedCogThiefGame : DistributedMinigame {\n  throwingPie(uint32 avId, int32 timestamp, int32/100 heading, int32/100 x, int32/100 y, int32/100 z) clsend broadcast;\n  hitBySuit(uint32 avId, int32 timestamp, int8 suitNum, int32/100 x, int32/100 y, int32/100 z) clsend broadcast airecv;\n  pieHitSuit(uint32 avId, int32 timestamp, int8 suitNum, int32/100 x, int32/100 y, int32/100 z) clsend broadcast airecv;\n  cogHitBarrel(int32 clientStamp, int8 cogIndex, int8 barrelIndex, int32/100 x, int32/100 y, int32/100 z) clsend airecv;\n  cogAtReturnPos(int32 clientstamp, int8 cogIndex, int8 barrelIndex) clsend airecv;\n  updateSuitGoal(int32 timestamp, int32 inResponseToClientStamp, int8 suitNum, int8 goalType, int64 goalId, int32/100 x, int32/100 y, int32/100 z) broadcast;\n  makeCogCarryBarrel(int32 timestamp, int32 inResponseToClientStamp, int8 cogIndex, int8 barrelIndex, int32/100 x, int32/100 y, int32/100 z) broadcast;\n  makeCogDropBarrel(int32 timestamp, int32 inResponseToClientStamp, int8 cogIndex, int8 barrelIndex, int32/100 x, int32/100 y, int32/100 z) broadcast;\n  markBarrelStolen(int32 timestamp, int32 inResponseToClientStamp, int8 barrelIndex) broadcast;\n};\n\nstruct twoDTreasureInfo {\n  uint8 treasureIndex;\n  uint8 treasureValue;\n};\n\nstruct twoDSectionInfo {\n  uint8 sectionIndex;\n  uint8 enemyIndicesSelected[];\n  twoDTreasureInfo treasureIndicesSelected[];\n  uint8 spawnPointIndicesSelected[];\n  uint8 stomperIndicesSelected[];\n};\n\ndclass DistributedTwoDGame : DistributedMinigame {\n  showShootGun(uint32 avId, int16 timestamp) clsend broadcast;\n  toonHitByEnemy(uint32 avId, int16 timestamp) clsend broadcast airecv;\n  toonFellDown(uint32 avId, int16 timestamp) clsend broadcast airecv;\n  toonSquished(uint32 avId, int16 timestamp) clsend broadcast airecv;\n  toonVictory(uint32 avId, int16 timestamp) clsend broadcast airecv;\n  claimTreasure(uint8 sectionIndex, uint8 treasureIndex) airecv clsend;\n  claimEnemyShot(uint8 sectionIndex, uint8 enemyIndex) airecv clsend;\n  reportDone() airecv clsend;\n  setSectionsSelected(twoDSectionInfo sectionsSelected[]) required broadcast ram;\n  setTreasureGrabbed(uint32 avId, uint8 sectionIndex, uint8 treasureIndex) broadcast;\n  setEnemyShot(uint32 avId, uint8 sectionIndex, uint8 enemyIndex, uint32 enemyHealth) broadcast;\n  addVictoryScore(uint32 avId, uint8 score) broadcast;\n  setEveryoneDone() broadcast;\n};\n\ndclass DistributedPicnicTable : DistributedNode {\n  fillSlot(uint32 avId, uint8 index, int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r, int16 timestamp, uint32 parentDoId) broadcast;\n  emptySlot(uint32 avId, uint8 index, int16 timestamp) broadcast;\n  requestTableState() airecv clsend;\n  setTableState(uint32 tableStateList[], uint8 isplaying) broadcast ram;\n  setGameZone(uint32 zoneId, uint8 gamestate) broadcast;\n  setIsPlaying(uint8 isPlaying) broadcast ram;\n  requestJoin(uint8 todo0, int16/10 todo1, int16/10 todo2, int16/10 todo3, int16/10 todo4, int16/10 todo5, int16/10 todo6) airecv clsend;\n  rejectJoin() broadcast;\n  requestObserve() airecv clsend;\n  leaveObserve() airecv clsend;\n  requestGameZone() airecv clsend;\n  requestPickedGame(uint8 todo0) clsend airecv;\n  requestExit() airecv clsend;\n  requestZone() clsend airecv;\n  announceWinner(string winString, uint32 avId) broadcast;\n  allowObserve() broadcast;\n  allowPick() broadcast;\n  setZone(uint32 zoneId) broadcast;\n};\n\ndclass DistributedChineseCheckers : DistributedNode {\n  requestExit() clsend airecv;\n  requestBegin() clsend airecv;\n  requestMove(uint8 todo0[]) clsend airecv;\n  requestTimer() clsend airecv;\n  requestSeatPositions() clsend airecv;\n  startBeginTimer(uint16 todo0, int16 todo1) broadcast ram;\n  gameStart(uint8 playerNum) broadcast;\n  setTableDoId(uint32 doId) required broadcast ram;\n  setGameState(uint8 tableState[], uint8 moveList[]) required broadcast ram;\n  setTimer(int16 timerEnd) broadcast ram required;\n  setTurnTimer(int16 turnEnd) broadcast ram required;\n  sendTurn(uint8 playersTurn) broadcast ram;\n  requestWin() clsend airecv;\n  announceWin(uint32 avId) broadcast;\n  announceSeatPositions(uint8 playerPos[]) broadcast;\n};\n\ndclass DistributedCheckers : DistributedNode {\n  requestExit() clsend airecv;\n  requestBegin() clsend airecv;\n  requestTimer() clsend airecv;\n  requestMove(uint8 todo0[]) clsend airecv;\n  startBeginTimer(uint16 todo0, int16 todo1) broadcast ram;\n  gameStart(uint8 playerNum) broadcast;\n  setTableDoId(uint32 doId) required broadcast ram;\n  setGameState(uint8 tableState[], uint8 moveList[]) required broadcast ram;\n  setTimer(int16 timerEnd) broadcast ram required;\n  setTurnTimer(int16 turnEnd) broadcast ram required;\n  sendTurn(uint8 playersTurn) broadcast ram;\n  requestWin() clsend airecv;\n  announceWin(uint32 avId) broadcast;\n  illegalMove() broadcast;\n};\n\ndclass DistributedFindFour : DistributedNode {\n  requestExit() clsend airecv;\n  requestBegin() clsend airecv;\n  requestMove(uint8 todo0) clsend airecv;\n  requestTimer() clsend airecv;\n  requestWin(uint8 todo0[]) clsend airecv;\n  startBeginTimer(uint16 todo0, int16 todo1) broadcast ram;\n  setTableDoId(uint32 doId) required broadcast ram;\n  setGameState(uint8 tableState[][], uint8 moveCol, uint8 movePos, uint8 turn) required broadcast ram;\n  setTimer(int16 timerEnd) broadcast ram required;\n  setTurnTimer(int16 turnEnd) broadcast ram required;\n  gameStart(uint8 playerNum) broadcast;\n  sendTurn(uint8 playersTurn) broadcast ram;\n  announceWin(uint32 avId) broadcast;\n  announceWinLocation(uint8 todo0, uint8 todo1, uint8 todo2, uint8 todo3) broadcast;\n  announceWinnerPosition(uint8 x, uint8 y, uint8 winDirection, uint8 playerNum) broadcast;\n  illegalMove() broadcast;\n  tie() broadcast;\n};\n\ndclass DistributedMailManager : DistributedObject {\n  sendSimpleMail(uint32 todo0, uint32 todo1, string todo2);\n  setNumMailItems(uint32 todo0, uint32 todo1) airecv;\n};\n\ndclass DistributedPartyManager : DistributedObject {\n  addParty(uint32 todo0, uint32 todo1, string todo2, string todo3, int8 todo4, int8 todo5, activity todo6[], decoration todo7[], uint32 todo8[], uint16 todo9);\n  addPartyRequest(uint32 hostId, char startTime[0-256], char endTime[0-256], int8 isPrivate, int8 inviteTheme, activity activities[], decoration decorations[], uint32 inviteeIds[]) airecv clsend;\n  addPartyResponse(uint32 hostId, int8 errorCode);\n  addPartyResponseUdToAi(uint64 partyId, int8 errorCode, party partyStruct) airecv;\n\n  markInviteAsReadButNotReplied(uint32 todo0, uint64 todo1);\n  respondToInvite(uint32 todo0, uint32 todo1, uint16 todo2, uint64 todo3, uint8 todo4);\n  respondToInviteResponse(uint32 todo0, uint16 todo1, uint64 todo2, int8 todo3, uint8 todo4) airecv;\n\n  changePrivateRequest(uint64 todo0, int8 todo1) airecv clsend;\n  changePrivateRequestAiToUd(uint32 todo0, uint64 todo1, int8 todo2);\n  changePrivateResponseUdToAi(uint32 todo0, uint64 todo1, int8 todo2, int8 todo3) airecv;\n  changePrivateResponse(uint64 partyId, int8 newPrivateStatus, int8 errorCode);\n\n  changePartyStatusRequest(uint64 partyId, int8 newPartyStatus) airecv clsend;\n  changePartyStatusRequestAiToUd(uint32 todo0, uint64 todo1, int8 todo2);\n  changePartyStatusResponseUdToAi(uint32 todo0, uint64 todo1, int8 todo2, int8 todo3) airecv;\n  changePartyStatusResponse(uint64 partyId, int8 newPartyStatus, int8 errorCode, uint16 beansRefunded);\n\n  partyInfoOfHostRequestAiToUd(uint32 todo0, uint32 todo1);\n  partyInfoOfHostFailedResponseUdToAi(uint32 todo0) airecv;\n  partyInfoOfHostResponseUdToAi(party partyStruct, uint32 inviteeIds[]) airecv;\n\n  givePartyRefundResponse(uint32 todo0, uint64 todo1, int8 todo2, uint16 todo3, uint32 todo4);\n  getPartyZone(uint32 hostId, uint32 zoneId, uint8 isAvAboutToPlanParty) clsend airecv;\n  receivePartyZone(uint32 hostId, uint64 partyId, uint32 zoneId);\n  freeZoneIdFromPlannedParty(uint32 hostId, uint32 zoneId) clsend airecv;\n\n  sendAvToPlayground(uint32 avId, uint8 retCode);\n  exitParty(uint32 partyZone) clsend airecv;\n  removeGuest(uint32 ownerId, uint32 avId) airecv clsend;\n  partyManagerAIStartingUp(uint32 todo0, uint32 todo1);\n  partyManagerAIGoingDown(uint32 todo0, uint32 todo1);\n  partyHasStartedAiToUd(uint64 partyId, uint32 shardId, uint32 zoneId, string hostName);\n  toonHasEnteredPartyAiToUd(uint32 todo0);\n  toonHasExitedPartyAiToUd(uint32 todo0);\n  partyHasFinishedUdToAllAi(uint64 partyId) airecv;\n  updateToPublicPartyInfoUdToAllAi(uint32 shardId, uint32 zoneId, uint64 partyId, uint32 hostId, uint8 numGuests, uint8 maxGuests, string hostName, uint8 activities[], uint8 minLeft) airecv;\n  updateToPublicPartyCountUdToAllAi(uint32 partyCount, uint64 partyId) airecv;\n  requestShardIdZoneIdForHostId(uint32 todo0) clsend airecv;\n  sendShardIdZoneIdToAvatar(uint32 shardId, uint32 zoneId);\n  partyManagerUdStartingUp() airecv;\n  partyManagerUdLost() airecv;\n  updateAllPartyInfoToUd(uint32 todo0, uint64 todo1, uint32 todo2, uint32 todo3, uint8 todo4, uint8 todo5, string todo6, uint8 todo7[], uint64 todo8);\n  forceCheckStart();\n  requestMw(uint32 todo0, string todo1, uint32 todo2, uint32 todo3);\n  mwResponseUdToAllAi(uint32 todo0, string todo1, uint32 todo2, uint32 todo3) airecv;\n  receiveId(uint64 ids[]) airecv;\n};\n\ndclass DistributedObjectGlobal : DistributedObject {\n};\n\ndclass GlobalPartyManager : DistributedObjectGlobal {\n    partyManagerAIHello(uint32 channel);\n    queryParty(uint32 hostId);\n    addParty(DoId avId, uint64 partyId, string start, string end, int8 isPrivate,\n             int8 inviteTheme, activity activities[], decoration decorations[], DoIdList inviteeIds);\n    partyHasStarted(uint64 partyId, uint32 shardId, uint32 zoneId, string hostName);\n    toonJoinedParty(uint64 partyId, uint32 avId);\n    toonLeftParty(uint64 partyId, uint32 avId);\n    requestPartySlot(uint64 partyId, uint32 avId, uint32 gateId);\n    partyDone(uint64 partyId);\n    allocIds(uint16 count);\n    avatarJoined(uint32 avId);\n};\n\nstruct PotentialToon {\n  uint32 avNum;\n  string avName;\n  string avDNA;\n  uint8 avPosition;\n  uint8 aname;\n};\n\ndclass ClientServicesManager : DistributedObjectGlobal {\n  login(string cookie, blob sig) clsend;\n  acceptLogin();\n\n  requestAvatars() clsend;\n  setAvatars(PotentialToon avatars[]);\n\n  createAvatar(blob dna, uint8 index) clsend;\n  createAvatarResp(uint32 avId);\n\n  setNameTyped(uint32 avId, string name) clsend;\n  setNameTypedResp(uint32 avId, uint8 status);\n  setNamePattern(uint32 avId, int16 p1, uint8 f1, int16 p2, uint8 f2, int16 p3, uint8 f3, int16 p4, uint8 f4) clsend;\n  setNamePatternResp(uint32 avId, uint8 status);\n\n  acknowledgeAvatarName(uint32 avId) clsend;\n  acknowledgeAvatarNameResp();\n\n  deleteAvatar(uint32 avId) clsend;\n\n  chooseAvatar(uint32 avId) clsend;\n\n  systemMessage(uint16 code, string params[]);\n\n  reportPlayer(uint32 avId, uint8 category) clsend;\n};\n\ndclass RATManager : DistributedObjectGlobal {\n};\n\ndclass AwardManager : DistributedObjectGlobal {\n  giveAwardToToon(uint32 todo0, DoId todo1, string todo2, DoId todo3, uint32 todo4, uint32 todo5);\n};\n\ndclass DistributedCpuInfoMgr : DistributedObjectGlobal {\n  setCpuInfoToUd(uint32 todo0, uint32 todo1, string todo2, string todo3);\n};\n\ndclass DistributedSecurityMgr : DistributedObjectGlobal {\n  requestAccountId(uint32 todo0, uint32 todo1, uint32 todo2);\n  requestAccountIdResponse(uint32 todo0, uint32 todo1) airecv;\n};\n\ndclass NonRepeatableRandomSourceClient {\n  getRandomSamplesReply(uint32, uint32 []) airecv;\n};\n\ndclass TTCodeRedemptionMgr : DistributedObject, NonRepeatableRandomSourceClient {\n  giveAwardToToonResult(uint32 todo0, uint32 todo1);\n  redeemCode(uint32 code, char callback[0-256]) airecv clsend;\n  redeemCodeAiToUd(uint32 todo0, DoId todo1, uint32 todo2, string todo3, uint32 todo4);\n  redeemCodeResultUdToAi(uint32 todo0, uint32 todo1, uint32 todo2, uint32 todo3, uint32 todo4) airecv;\n  redeemCodeResult(uint32 context, uint32 result, uint32 awardMgrResult);\n};\n\ndclass NonRepeatableRandomSource : DistributedObject, NonRepeatableRandomSourceClient {\n  getRandomSamples(DoId callback, string num, uint32 context, uint32);\n  randomSample(DoId nrrsDoId, uint32 random);\n  randomSampleAck() airecv;\n};\n\ndclass DistributedInGameNewsMgr : DistributedObjectGlobal {\n  setLatestIssueStr(string issueStr) required broadcast ram;\n  inGameNewsMgrAIStartingUp(uint32 todo0, uint32 todo1);\n  newIssueUDtoAI(string todo0) airecv;\n};\n\ndclass DistributedWhitelistMgr : DistributedObjectGlobal {\n  updateWhitelist() broadcast;\n  whitelistMgrAIStartingUp(uint32 todo0, uint32 todo1);\n  newListUDtoAI() airecv;\n};\n\nstruct Friend\n{\nuint32 doId;\nstring name;\nblob dna;\nuint32 petId;\n};\n\ndclass TTRFriendsManager : DistributedObjectGlobal {\n  clearList(uint32 avId);\n  removeFriend(uint32 avId) clsend;\n  requestAvatarInfo(uint32 avIds[]) clsend;\n\n  requestFriendsList() clsend;\n\n  friendInfo(Friend resp);\n  friendList(Friend resp[]);\n\n  friendOnline(uint32 id, uint8 commonChatFlags, uint8 whitelistChatFlags);\n  friendOffline(uint32 id);\n\n  comingOnline(uint32 avId, uint32 friendIds[]);\n  goingOffline(uint32 avId);\n\n  getAvatarDetails(uint32 friendId) clsend;\n  friendDetails(uint32 friendId, blob details);\n};\n\n\ndclass DistributedPhaseEventMgr : DistributedObject {\n  setNumPhases(uint8 numPhases) required broadcast ram;\n  setDates(datetime holidayDates[]) broadcast required;\n  setCurPhase(int8 curPhase) required broadcast ram;\n  setIsRunning(bool isRunning) required broadcast ram;\n};\n\ndclass DistributedHydrantZeroMgr : DistributedPhaseEventMgr {\n};\n\ndclass DistributedMailboxZeroMgr : DistributedPhaseEventMgr {\n};\n\ndclass DistributedTrashcanZeroMgr : DistributedPhaseEventMgr {\n};\n\ndclass DistributedSillyMeterMgr : DistributedPhaseEventMgr {\n};\n\ndclass ARGManager : DistributedObjectGlobal {\n};\n'